<#
.SYNOPSIS
   This script is used to check the compliance of Windows Server 2022 with specific baselines.
.DESCRIPTION
   The script checks the compliance of Windows Server 2022 with specific baselines defined in the BASELINE_DICT.
   It logs the results and creates a JSON file with the compliance details.
.PARAMETER week_release
   This parameter is used to specify the week of the release. It is not mandatory.
.EXAMPLE
   .\WIN2022.ps1 -release_package "2025W20-0"
   This command runs the script with the specified week release.
   Default value is "2025W13-0".
#>
param(
   [parameter(Mandatory = $false)]
   [string]$release_package = "2025W13-0"
)

#----------------------------------------------------------
#       Set Logging/Troubleshooting Options
#----------------------------------------------------------
If ($PSBoundParameters['Debug']){
   $DebugPreference = 'Continue'
   $Script:Debug = $false
}
#----------------------------------------------------------
#       Setup variables needed for the base script
#----------------------------------------------------------
$ErrorActionPreference = "SilentlyContinue"

# D or SystemDrive
if(Test-Path -Path "D:"){
   $appsDrive = 'D:'
}else{
   $appsDrive = $env:SystemDrive
}

$Global:OS_PRODUCT = "WIN2022"
$Global:COMPLIANCE_DICTIONARY = @{}
$Global:ComplianceFile = "$appsDrive\apps\MOCAT\OS\logs\WIN_OS_Compliance.json"
#$Global:ComplianceFile = "$env:userprofile/WIN_OS_Compliance.json"
$Script:ExitCode = 0

#----------------------------------------------------------
# Setup Logging
$LogFile = "$appsDrive\apps\MOCAT\OS\logs\win_os_compliance.log"
$Script:AllValuesToLog = $true
If (Test-Path $LogFile) { Remove-Item $LogFile -Force }

#-----------------------------------------------------------
#Set up Audit files
$Script:AuditPolResults = "C:\temp\audit_auditpol_results.txt"
$Script:SeceditResults = "C:\temp\audit_secedit_results.txt"
Remove-Item $AuditPolResults -Force -WhatIf:$false -ErrorAction SilentlyContinue
Remove-Item $SeceditResults -Force -WhatIf:$false -ErrorAction SilentlyContinue

# BASELINES these are used to run BaselineCheck{} dynamically
$Global:BASELINE_DICT = @{
    '009' = 'ISBL-10564-01.009' # ALLOW ADMINISTRATOR ACCOUNT LOCKOUT
    '043' = 'ISBL-10564-01.043' # Replace a process level token
    '055' = 'ISBL-10564-01.055' # Domain member: Digitally encrypt secure channel data (when possible)
    '064' = 'ISBL-10564-01.064' # Configure Interactive logon: Message title for users attempting to log on
    '065' = 'ISBL-10564-01.065' # Interactive logon: Prompt user to change password before expiration
    '066' = 'ISBL-10564-01.066' # Interactive logon: Smart card removal behavior
    '073' = 'ISBL-10564-01.073' # Microsoft network server: Disconnect clients when logon hours expire
    '074' = 'ISBL-10564-01.074' # Microsoft network server: Server SPN target name validation level
    '079' = 'ISBL-10564-01.079' # Configure Network access: Named Pipes that can be accessed anonymously
    '087' = 'ISBL-10564-01.087' # Network Security: Allow PKU2U authentication requests to this computer to use online identities
    # Existing baselines from newbasescript.txt
    '1' = 'ISBL-#####-##.##1' # Dummy Compliance
    '128' = 'ISBL-10564-01.128' # AUDIT ACCOUNT LOCKOUT
    '129' = 'ISBL-10564-01.129' # AUDIT GROUP MEMBERSHIP
    '130' = 'ISBL-10564-01.130' # AUDIT LOGOFF
    '127' = 'ISBL-10564-01.127' # AUDIT PROCESS CREATION
    '126' = 'ISBL-10564-01.126' # AUDIT PNP ACTIVITY
    '125' = 'ISBL-10564-01.125' # AUDIT USER ACCOUNT MANAGEMENT
    '124' = 'ISBL-10564-01.124' # AUDIT SECURITY GROUP MANAGEMENT
    '123' = 'ISBL-10564-01.123' # AUDIT APPLICATION GROUP MANAGEMENT
    '122' = 'ISBL-10564-01.122' # AUDIT CREDENTIAL VALIDATION
    '121' = 'ISBL-10564-01.121' # WINDOWS FIREWALL: PUBLIC: LOGGING: LOG SUCCESSFUL CONNECTIONS
    '120' = 'ISBL-10564-01.120' # WINDOWS FIREWALL: PUBLIC: LOGGING: LOG DROPPED PACKETS
    '119' = 'ISBL-10564-01.119' # WINDOWS FIREWALL: PUBLIC: LOGGING: SIZE LIMIT (KB)
    '166' = 'ISBL-10564-01.166'
    '167' = 'ISBL-10564-01.167'
    '169' = 'ISBL-10564-01.169'
    '174' = 'ISBL-10564-01.174'
    '175' = 'ISBL-10564-01.175'
    '176' = 'ISBL-10564-01.176'
    '177' = 'ISBL-10564-01.177'
    '178' = 'ISBL-10564-01.178'
    '179' = 'ISBL-10564-01.179'
    '180' = 'ISBL-10564-01.180'
    '181' = 'ISBL-10564-01.181'
    '182' = 'ISBL-10564-01.182'
    '183' = 'ISBL-10564-01.183'
    '184' = 'ISBL-10564-01.184'
    '185' = 'ISBL-10564-01.185'
    '187' = 'ISBL-10564-01.187'
    '188' = 'ISBL-10564-01.188'
    '189' = 'ISBL-10564-01.189'
    '190' = 'ISBL-10564-01.190'
    '193' = 'ISBL-10564-01.193'
    '194' = 'ISBL-10564-01.194'
    '197' = 'ISBL-10564-01.197'
    '199' = 'ISBL-10564-01.199'
    '200' = 'ISBL-10564-01.200'
    '201' = 'ISBL-10564-01.201'
    '202' = 'ISBL-10564-01.202'
    '206' = 'ISBL-10564-01.206'
    '208' = 'ISBL-10564-01.208'
    '209' = 'ISBL-10564-01.209'
    '213' = 'ISBL-10564-01.213'
    '214' = 'ISBL-10564-01.214'
    '215' = 'ISBL-10564-01.215'
    '216' = 'ISBL-10564-01.216'
    '219' = 'ISBL-10564-01.219'
    '220' = 'ISBL-10564-01.220'
    '223' = 'ISBL-10564-01.223'
    '224' = 'ISBL-10564-01.224'
    '225' = 'ISBL-10564-01.225'
    '226' = 'ISBL-10564-01.226'
    '227' = 'ISBL-10564-01.227'
    '228' = 'ISBL-10564-01.228'
    '229' = 'ISBL-10564-01.229'
    '230' = 'ISBL-10564-01.230'
    '231' = 'ISBL-10564-01.231'
    '232' = 'ISBL-10564-01.232'
    '233' = 'ISBL-10564-01.233'
    '234' = 'ISBL-10564-01.234'
    '238' = 'ISBL-10564-01.238'
    '240' = 'ISBL-10564-01.240'
    '241' = 'ISBL-10564-01.241'
    '242' = 'ISBL-10564-01.242'
    '246' = 'ISBL-10564-01.246'
    '247' = 'ISBL-10564-01.247'
    '248' = 'ISBL-10564-01.248'
    '249' = 'ISBL-10564-01.249'
    '250' = 'ISBL-10564-01.250'
    '251' = 'ISBL-10564-01.251'
    '252' = 'ISBL-10564-01.252'
    '255' = 'ISBL-10564-01.255'
    '258' = 'ISBL-10564-01.258'
    '260' = 'ISBL-10564-01.260'
    '261' = 'ISBL-10564-01.261'
    '263' = 'ISBL-10564-01.263'
    '264' = 'ISBL-10564-01.264'
    '266' = 'ISBL-10564-01.266'
    '267' = 'ISBL-10564-01.267'
    '269' = 'ISBL-10564-01.269'
    '270' = 'ISBL-10564-01.270'
    '271' = 'ISBL-10564-01.271'
    '272' = 'ISBL-10564-01.272'
    '273' = 'ISBL-10564-01.273'
    '274' = 'ISBL-10564-01.274'
    '275' = 'ISBL-10564-01.275'
    '279' = 'ISBL-10564-01.279'
    '280' = 'ISBL-10564-01.280'
    '283' = 'ISBL-10564-01.283'
    '284' = 'ISBL-10564-01.284'
    '292' = 'ISBL-10564-01.292'
    '293' = 'ISBL-10564-01.293'
    '298' = 'ISBL-10564-01.298'
    '300' = 'ISBL-10564-01.300'
    '307' = 'ISBL-10564-01.307'
    '310' = 'ISBL-10564-01.310'
    '317' = 'ISBL-10564-01.317'
    '326' = 'ISBL-10564-01.326'
    '331' = 'ISBL-10564-01.331'
    '332' = 'ISBL-10564-01.332'
    '336' = 'ISBL-10564-01.336'
    '337' = 'ISBL-10564-01.337'
    '338' = 'ISBL-10564-01.338' # Windows Event Log must be set to Automatic.
    '344' = 'ISBL-10564-01.344' # Wallet Service must be set to Disabled
    '351' = 'ISBL-10564-01.351' # Connected User Experiences and Telemetry (Diagtrack) must be set to Disabled
    '352' = 'ISBL-10564-01.352' # SMTPSVC must be disabled
    '363' = 'ISBL-10564-01.363' # USB Drive Access
    '365' = 'ISBL-10564-01.365' # Block launching Windows Store apps with Windows Runtime API access from hosted content must be set to Enabled.
    '366' = 'ISBL-10564-01.366' # Allow Telemetry must be set to Disabled
    '367' = 'ISBL-10564-01.367' # Configure Windows Defender SmartScreen is set to Disabled
    '369' = 'ISBL-10564-01.369' # Do not allow COM port redirection must be set to Enabled
    '370' = 'ISBL-10564-01.370' # Do not allow supported Plug and Play device redirection must be set to Enabled
    '375' = 'ISBL-10564-01.375' # Allow Cortana must be set to Disabled
    '376' = 'ISBL-10564-01.376' # Allow Cortana above lock screen must be set to Disabled
    '377' = 'ISBL-10564-01.377' # Allow search and Cortana to use location must be set to Disabled
    '380' = 'ISBL-10564-01.380' # Disable all apps from Windows Store must be set to Enabled
    '381' = 'ISBL-10564-01.381' # Turn off Microsoft Defender AntiVirus is set to Enabled
    '383' = 'ISBL-10564-01.383' # Join Microsoft MAPS must be set to Disabled
    '384' = 'ISBL-10564-01.384' # Send file samples when further analysis is required must be set to Never Send
    '386' = 'ISBL-10564-01.386' # Configure Watson events must be set to Disabled
    '387' = 'ISBL-10564-01.387' # Maximum log size for Powershell Logs
    '388' = 'ISBL-10564-01.388' # Lock down the Security Descriptor on the PowerShell Logs
    '389' = 'ISBL-10564-01.389' # Maximum Operational log size for Powershell Logs
    '390' = 'ISBL-10564-01.390' # Lock down the Security Descriptor on the PowerShell Operational Logs
    '394' = 'ISBL-10564-01.394' # Turn on Module Logging must be set to Enabled
    '396' = 'ISBL-10564-01.396' # Browser Proxy Lockdown
    '440' = 'ISBL-10564-01.440' # Logon as a Service
    '441' = 'ISBL-10564-01.441' # disable Machine Configuration
    '442' = 'ISBL-10564-01.442' # disable ExtensionService
}
#####################################################
#                  LOGGER
#####################################################
## Used to write Log information
Function Write-Log ($Level, $Details, $NewLine=$false) {
   $Time = get-date -F "yyyy-MM-dd HH:mm:ss,fff"

   switch ($Level) {
       0 { $LogLevel = "INFO" }
       1 { $LogLevel = "WARNING" }
       2 { $LogLevel = "ERROR" }
   }
   "$Time`t$Section`t$LogLevel`t$Details" | Out-File $LogFile -append
   If ($NewLine -eq $True) { "`n" | Out-File $LogFile -append }
}

########################################################
#           PULL SERVER NAME AND DRIVE INFO
########################################################

Function Get-ServerInfo {
   #Server Info
   Try {
       $OS = Get-WmiObject -class Win32_OperatingSystem | Select-Object -ExpandProperty Caption
       If ($OS -notlike "*2022*") {
           Write-Log 0 "Platform identified as Windows 2022"
       } else {
           Write-log 2 "Platform identified as $OS"
           Write-log 2 "This script is only supported on Windows Server 2022"
           Exit(22)
       }
   } Catch {
       Write-log 2 "Failed to get Platform identity. Error: $_.Exception"
       Exit(19)
   }
}

########################################################
#                   EXECUTEAUDITS
########################################################
Function ExecuteAudits {
   Write-Log 0 "Inventory log file located at: $LogFile"
   Write-Log 0 "Begin writing discovered product's attributes"

   #$INSTANCE_BASELINES = New-Object PSObject @{} # Step 1
   $INSTANCE_BASELINES = [Ordered]@{}
   Create-AuditpolResults
   Create-SeceditResults
   #################################################################
   #         RUN BASELINECHECKS
   #################################################################
   ForEach($BASEKEY in $BASELINE_DICT.Keys|Sort-Object){
       $BASELINE_NAME = $BASELINE_DICT[$BASEKEY]

       #EXECUTE BASELINE FUNCTIONS
       try {
           $BaselineFunction = "BaselineCheck{0}" -f $BASEKEY
           $FUNCRESULT = & $BaselineFunction -CheckName $BASELINE_NAME
           $INSTANCE_BASELINES[$BASELINE_NAME] = $FUNCRESULT
       } catch {
           Write-Log 2 "Error outputing $BASELINE_NAME"
           Write-Output "Error outputing $BASELINE_NAME"
           $_
       }
   }

   ###################################################################
   Write-Log 0 " "

   # Baseline completed create JSON file
   if ($INSTANCE_BASELINES.Count -gt 0) {
       # Create Check Details Dict
       $CHECK_DETAILS = create_check_details
       # Add product key to instances, embed in check details
       $CHECK_DETAILS[$OS_PRODUCT] = $INSTANCE_BASELINES
       $Global:COMPLIANCE_DICTIONARY["CheckDetails"] = $CHECK_DETAILS

       $CREATED = create_compliance_json
       if($CREATED -eq $true) {
           Write-Log 0 "Created: $OS_PRODUCT compliance file"
           Write-Output "Created: $Global:ComplianceFile"
       }
   }else{
       Write-Log 2 "Unable to execute compliance functions"
       Write-Output "Unable to execute compliace functions"
       Exit(33)
   }

   # End of ExecuteAudits
}

########################################################
#              CREATE CHECK DETAILS
########################################################
Function create_check_details(){
   $d = [Ordered]@{}
   $servername = $env:COMPUTERNAME
   $auditTime = get-date -f "MM/dd/yyyy HH:mm:ss"
   $os_version = [Environment]::OSVersion.Version.ToString()
   $audit_result_date = get-date -format "yyyyMMdd"

   $d["AUDIT_NAME"] =  "OS_COMPLIANCE"
   $d["OS_Version"] = $os_version
   $d["OS_FAMILY"] = "Windows Server 2022"
   $d["SOURCE_CODE"] = "DCAF"
   $d["AUDIT_RESULT_ID"] ="$($audit_result_date)0001"
   $d["AUDIT_DATE"] = $auditTime
   $d["ORM_VERSION"] = $release_package
   $d["ORM_Script_Integrity"] = "True"
   $d["SERVER_NAME"] = $servername
   return $d
}

########################################################
#              CREATE COMPLIANCE JSON
########################################################
Function create_compliance_json(){
   $success = $false
   try{
       $JSON_OUTPUT = $Global:COMPLIANCE_DICTIONARY|ConvertTo-Json -Depth 5 -ErrorAction Stop
       If(Test-Path -path $Global:ComplianceFile){Remove-Item -Path $Global:ComplianceFile -Force}
       sleep 2
       $JSON_OUTPUT| ForEach-Object{
           # Optional Code used to change default JSON spacing in Powershell
           $_ -replace "(?m)  (?<=^(?:  )*)", " "
       }| Out-File -FilePath $Global:ComplianceFile -Encoding utf8 -Force -NoClobber -ErrorAction Stop
       sleep 2
       $filecontent = Get-Content $Global:ComplianceFile
       [System.IO.File]::WriteAllLines($Global:ComplianceFile, $filecontent)

       if(Test-Path -Path $Global:ComplianceFile){
           $success = $true
       }
   } catch {
       Write-Log 2 "ERROR Creating compliance JSON"
   }
   return $success
}

########################################################
#              BASELINE HELPER FUNCTIONS
########################################################

# Dumps auditpol results to a file
Function Create-AuditpolResults() {
   #$AuditPolCommand = & "$env:SystemRoot/system32/auditpol.exe" /get /category:* /r > $Script:AuditPolResults
   $AuditPolCommand = & "$env:SystemRoot\system32\auditpol.exe" /get /category:* /r > $Script:AuditPolResults
   if(Test-Path $AuditPolResults){
       Write-Log 0 "Auditpol results file created at $AuditPolResults"
       return $true
   } else {
       Write-log 2 "Auditpol results file NOT created at $AuditPolResults"
       return $false
   }
}

#Dump secedit results to a file
Function Create-SeceditResults(){
   #$SeceditCommand = & "$env:SystemRoot/system32/secedit.exe" /export /areas USER_RIGHTS /cfg $Script:SeceditResults
   $SeceditCommand = secedit /export /areas USER_RIGHTS /cfg $Script:SeceditResults
   if(Test-Path $SeceditResults){
       Write-Log 0 "Secedit results file created at $SeceditResults"
       return $true
   } else {
       Write-log 2 "Secedit results file NOT created at $SeceditResults"
       return $false
   }
}

Function getInfoWithAuditPol(){
   params(
       [string]$PRIVGUID
   )

   $AuditPolMatch = ""
   if(Test-Path $AduitPolResults){
       $SecurityPolicyExport = Get-Content $AuditPolResults
       If($SecurityPolicyExport -match $PRIVGUID){
           Write-Debug "$PRIVGUID Found"
           $vLine = $SecurityPolicyExport | Where {$_.Contains($PRIVGUID)}
           Write-Debug "$PRIV Line:$vLine"
           $vLineSplit = $vLine.Split(",")
           $AuditPolMatch = $vLineSplit[4].Trim()
           Write-Debug "Result:$AuditPolMatch"
       }Else{
           Write-Debug "$PRIV not found in results"
       }
   }Else{
       Write-Debug "Auditpol export output not found."
   }
   Return $AuditPolMatch
}

# Function TranslateSid([string]$vSID) {
#     If ($vSID -match "\*S") {
#         $vSID = $vSID.TrimStart("*")
#         Write-Debug "Translating SID: $vSID"
#         try {
#             $objSID = New-Object System.Security.Principal.SecurityIdentifier($vSID)
#             $objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
#         }
#         catch [Exception] {
#             Write-Debug "Translate failed"
#             Return $vSID
#         }
#         $vName = $objUser.Value
#         Write-Debug "Translated SID Name: $vName($vSID)"
#         Return $vName
#     }
#     else {
#         Return $vSID
#     }
# }
Function getInfoWithSeceditSingle([string]$vPriv) {
   if ($vPriv -NotLike "Se*") {
       $vPriv = TranslateURAHuman($vPriv)
   }

   $SecEditMatchList = ""
   if (Test-Path $SeceditResults) {
       $SecurityPolicyExport = Get-Content $SeceditResults
       foreach ($line in $SecurityPolicyExport) {
           if ($line -like "$vPriv`*") {
               Write-Debug "PRIV Line: $line"
               $vLineSplit = $line.Split("=")
               $vLineTemp = $vLineSplit[1].Trim()
               Write-Debug "PRIV DATA: $vLineTemp"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-544", "Administrators"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-11", "Authenticated Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-7", "Anonymous Logon"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-546", "Guests"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-19", "Local Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-20", "Network Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-6", "Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-568", "IIS_IUSRS"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-547", "Power Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-1-0", "Everyone"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-545", "Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-551", "Backup Operators"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-4", "Interactive"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-549", "Server Operators"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-21-1123561945-1708537768-1801674531-1132", "Object Recovery" #AD-ENT
               $vLineTemp = $vLineTemp -replace "\*S-1-5-21-1960408961-287218729-839522115-1109", "Object Recovery" #QA-ENT
               $vLineTemp = $vLineTemp -replace "\*S-1-5-21-1292428093-1770027372-839522115-1108", "Object Recovery" #DEV-ENT
               $SecEditMatchList = $vLineTemp.Split(",")
           }
       }
   }
   else {
       Write-log 2 "Secedit export output not found at $env:systemdrive\temp\audit_secedit_results.txt"
       Write-Debug "Secedit export output not found at $env:systemdrive\temp\audit_secedit_results.txt"
   }
   Return $SecEditMatchList
}

function RegKeyExists {
   param (
       [parameter(Mandatory = $true)]
       [ValidateNotNullOrEmpty()]
       [string]$RegistryPath,
       [parameter(Mandatory = $true)]
       [ValidateNotNullOrEmpty()]
       [string]$PropertyName
   )

   try {
       # Check if the registry path exists
       if (Test-Path -Path $RegistryPath) {
           $PropertyValue = Get-ItemProperty -Path $RegistryPath -ErrorAction Stop | Select-Object -ExpandProperty $PropertyName -ErrorAction Stop
           return $true
       }
       return $false
   } catch {
       # If any error occurs, assume the property does not exist
       return $false
   }
}

########################################################
#
########################################################
# Function to handle Registry compliance
function Test-Registry {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )
   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $RegistryPath = $Requirement.Path
   $ValueName = $Requirement.ValueName
   $ExpectedValue = $Requirement.ExpectedValue
   $MustExist = $Requirement.MustExist
   $ComparisonType = $Requirement.Comparator

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   Write-Debug "Testing Registry for: $($Requirement['CIS Name'])"
   if (Test-Path -Path $RegistryPath) {
       $RegProperty = Get-ItemProperty -Path $RegistryPath -Name $ValueName -ErrorAction SilentlyContinue

       if ($null -ne $RegProperty -and $RegProperty.PSObject.Properties.Name -contains $ValueName) {
           if ($RegProperty.$ValueName -is [array]) {
               $CurrentValue = ($RegProperty.$ValueName | ForEach-Object { $_.ToString() }) -join ", "
           } else {
               $CurrentValue = $RegProperty.$ValueName.ToString()
           }

           if ($ComparisonType -eq "=" -and $CurrentValue -eq $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Expected value matched: $ExpectedValue"
           } elseif ($ComparisonType -eq ">" -and $CurrentValue -gt $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is greater than: $CurrentValue > $ExpectedValue"
           } elseif ($ComparisonType -eq "<" -and $CurrentValue -lt $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is less than: $CurrentValue < $ExpectedValue"
           }elseif ($ComparisonType -eq ">=" -and $CurrentValue -ge $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is greater than or equal: $CurrentValue >= $ExpectedValue"
           } elseif ($ComparisonType -eq "<=" -and $CurrentValue -le $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is less than or equal: $CurrentValue <= $ExpectedValue"
           } elseif ($ComparisonType -eq "Contains" -and $CurrentValue -like "*$ExpectedValue*") {
               $ReturnCode = 0
               $ReturnResult = "Value contains expected: $CurrentValue contains $ExpectedValue"
           } else {
               $ReturnCode = 1
               $ReturnResult = "Value does not meet the expected condition. Found: $CurrentValue, Expected: $ComparisonType $ExpectedValue"
               $ErrorMessage = "Comparison failed for $ValueName with $ComparisonType"
           }
       } else {
           if(-not $MustExist){
               $ReturnCode = 0
               $ReturnResult = "Registry not set/found"
           }else {
               $ReturnCode = 1
               $ReturnResult = "Registry value '$ValueName' not found"
               $ErrorMessage = "Registry value '$ValueName' does not exist in registry path '$RegistryPath'"
           }
       }
   } else {
       $ReturnCode = 1
       $ReturnResult = "Registry not Found"
       $ErrorMessage = "Registry Path '$RegistryPath' does not exist."
   }

   #Compliance Dictionary
   $CheckResults = @{}
   $CheckResults["sExpectedValue"] = $Expected
   $CheckResults["sReturnValue"] = $ReturnResult
   $CheckResults["bIsCompliant"] = $ReturnCode
   $CheckResults["sErrorMessage"] = $ErrorMessage
   return $CheckResults
}

# Function to handle Secedit compliance
Function Test-Secedit {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )

   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $SeceditKey = $Requirement.SeceditKey
   $ExpectedValue = $Requirement.ExpectedValue

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   if (Test-Path $Script:SeceditResults) {
       $SecurityPolicyExport = Get-Content $Script:SeceditResults
       # Ensure file is not empty
       if ($SecurityPolicyExport.Count -eq 0) {
           $ReturnResult = 'Secedit results file is empty'
           $ReturnCode = 1
           $ErrorMessage = 'Secedit export output is empty at ' + $Script:SeceditResults
           return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
       }
       foreach ($line in $SecurityPolicyExport) {
           if ($line -like "$SeceditKey`*") {
               Write-Debug "SeceditKey Line: $line"
               $vLineSplit = $line.Split("=")
               $vLineTemp = $vLineSplit[1].Trim()
               Write-Debug "SeceditKey DATA: $vLineTemp"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-544", "Administrators"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-11", "Authenticated Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-7", "Anonymous Logon"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-546", "Guests"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-19", "Local Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-20", "Network Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-6", "Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-568", "IIS_IUSRS"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-547", "Power Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-1-0", "Everyone"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-545", "Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-551", "Backup Operators"
               # Split the line into SID entries
               $SecEditSIDS = $vLineTemp.Split(",")
               $SIDS = Normalize_SecEdit_Results $SecEditSIDS # Assuming Normalize_SecEdit_Results exists and is defined elsewhere in the actual script
               if($SIDS){
                   # Check if SIDs expected are missing
                   $Missing_Values = ''
                   foreach ($ThisCondition in $ExpectedValue.Split(',')) {
                       $ContainsCondition = $false
                       foreach ($secedit_sid in $SIDS.Split(',')) {
                           if ($secedit_sid -eq $ThisCondition) {
                               $ContainsCondition = $true
                           }
                       }
                       if ($ContainsCondition -eq $false) {
                           $Missing_Values = "Missing " + $ThisCondition + "|"
                           $ReturnCode = 1
                           $ReturnResult = ""
                           break
                       }
                   }
               } else {
                   if($ExpectedValue -eq ""){
                       $ReturnCode = 0
                       $ReturnResult = "Sids not found for $SeceditKey"
                   } else {
                       $ReturnCode = 1
                       $ReturnResult = "Sids not found for $SeceditKey"
                   }
               }
               # Check if there are additional SIDs that are not expected
               $Extra_Values = ''
               foreach ($secedit_sid in $SIDS.Split(',')) {
                   $ContainsCondition = $false
                   foreach ($ThisCondition in $ExpectedValue.Split(',')) {
                       if ($secedit_sid -eq $ThisCondition) {
                           $ContainsCondition = $true
                       }
                   }
                   if ($ContainsCondition -eq $false) {
                       $Extra_Values = "Extra " + $secedit_sid + "|"
                       break
                   }
               }
               if($Extra_Values -or $Missing_Values){
                   $Missing_Values = $Missing_Values.Trim("|")
                   $Extra_Values = $Extra_Values.Trim('|')
                   if ($Missing_Values -and $Extra_Values) {
                       $ReturnResult = "$Missing_Values; $Extra_Values"
                   } elseif ($Missing_Values) {
                       $ReturnResult = "$Missing_Values"
                   } elseif ($Extra_Values) {
                       $ReturnResult = "$Extra_Values"
                   }
                   $ReturnCode = 1
               } else {
                   $ReturnCode = 0
                   $ReturnResult = "Found $SIDS"
               }
           } else {
               $ReturnResult = 'Secedit key not found'
               $ReturnCode = 1
               $ErrorMessage = 'Secedit key ' + $SeceditKey + ' not found in export'
           }
       }
   } else {
       $ReturnResult = 'Secedit results file not found'
       $ReturnCode = 1
       $ErrorMessage = 'Secedit export output not found at ' + $Script:SeceditResults
   }
   return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
}

Function Normalize_SecEdit_Results($SecEditSIDS){
   $results = ""
   foreach ($entry in $SecEditSIDS) {
       $entry = $entry.Trim()
       if ($entry -ne "") {
           $results = "$results,$entry"
       }
   }
   If ($results.Length -gt 0) {
       $results = $results.Trim(",")
   }
   return $results
}

# Function to handle Service compliance
function Test-Service {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )

   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $ServiceName = $Requirement.ServiceName
   $ExpectedValue = $Requirement.ExpectedValue

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   # ExpectedValue can be "Disabled", "Running,Automatic", etc.
   $ExpectedParts = $ExpectedValue.Split(',') | ForEach-Object { $_.Trim() }
   $ExpectedStatus = $ExpectedParts[0]
   $ExpectedStartType = if ($ExpectedParts.Count -gt 1) { $ExpectedParts[1] } else { $null }

   $Service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
   if ($Service) {
       $CurrentStatus = $Service.Status.ToString()
       $CurrentStartType = $Service.StartType.ToString()
       $CurrentValue = $CurrentStatus
       if ($ExpectedStartType) { $CurrentValue += ",$CurrentStartType" }

       $IsStatusCompliant = ($CurrentStatus -eq $ExpectedStatus)
       $IsStartTypeCompliant = if ($ExpectedStartType) { $CurrentStartType -eq $ExpectedStartType } else { $true }

       if ($IsStatusCompliant -and $IsStartTypeCompliant) {
           $ReturnCode = 0
           $ReturnResult = "$ServiceName found with $ExpectedValue"
       } else {
           $ReturnCode = 1
           $ReturnResult = "$ServiceName Status: $CurrentStatus; StartType: $CurrentStartType"
           $ErrorMessage = "$ServiceName not $ExpectedValue"
       }
   } else {
       $ReturnCode = 1
       $ReturnResult = "Service Not Found"
       $ErrorMessage = "Service $ServiceName not found"
   }

   #Compliance Dictionary
   $CheckResults = @{}
   $CheckResults["sExpectedValue"] = $Expected
   $CheckResults["sReturnValue"] = $ReturnResult
   $CheckResults["bIsCompliant"] = $ReturnCode
   $CheckResults["sErrorMessage"] = $ErrorMessage
   return $CheckResults
}

# Function to handle AuditPol compliance
function Test-AuditPol {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )

   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $AuditCategory = $Requirement.AuditCategory
   $CategoryGUID = $Requirement.CategoryGUID
   $ExpectedValue = $Requirement.ExpectedValue
   $ComparisonType = $Requirement.ComparisonType

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   if(Test-Path $Script:AuditPolResults){
       $result = getInfoWithAuditPol -PRIVGUID $CategoryGUID
       if($result){
           if($ComparisonType -eq "Match" -and ($result -like "*$ExpectedValue*")){
               $ReturnCode = 0
               $ReturnResult = "Found $result"
           } elseif ($ComparisonType -eq "Equal" -and ($result -eq $ExpectedValue)){
               $ReturnCode = 0
               $ReturnResult = "Found $result"
           } else {
               $ReturnCode = 1
               $ReturnResult = "Found $result"
               $ErrorMessage = "Expected Value; $ExpectedValue; Found $result"
           }
       } else {
           $ReturnCode = 1
           $ReturnResult = "Improper Comparisontype"
           $ErrorMessage = "Improper ComparisonType $ComparisonType"
       }
   }Else{
       $ReturnCode = 1
       $ReturnResult = "$CategoryGUID not found in results"
       $ErrorMessage = "$CategoryGUID not found in results"
   }

   #Compliance Dictionary
   $CheckResults = @{}
   $CheckResults["sExpectedValue"] = $Expected
   $CheckResults["sReturnValue"] = $ReturnResult
   $CheckResults["bIsCompliant"] = $ReturnCode
   $CheckResults["sErrorMessage"] = $ErrorMessage
   return $CheckResults
}

########################################################
# BEGIN BASELINE CHECKS
########################################################
# Existing BaselineCheck009 (from newbasescript.txt)
Function BaseLineCheck009([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.009"
       "CIS Name" = "ALLOW ADMINISTRATOR ACCOUNT LOCKOUT"
       "CheckType" = "Registry"
       "Path" = "HKLM:\Software\Policies\Microsoft\Windows\Safer\CodeIdentifiers"
       "ValueName" = "AllowAdminAccountLockout"
       "ExpectedValue" = "1"
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck043([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.043"
       "CIS Name" = "Replace a process level token"
       "CheckType" = "Secedit"
       "SeceditKey" = "SeAssignPrimaryTokenPrivilege" # Common Secedit key for this setting
       "ExpectedValue" = "LOCAL SERVICE,NETWORK SERVICE"
   }
   $ComplianceValues = Test-Secedit -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck055([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.055"
       "CIS Name" = "Domain member: Digitally encrypt secure channel data (when possible)"
       "CheckType" = "Registry"
       "Path" = "HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters"
       "ValueName" = "RequireSignOrSeal"
       "ExpectedValue" = "1" # Enabled
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck064([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.064"
       "CIS Name" = "Interactive logon: Message title for users attempting to log on"
       "CheckType" = "Registry"
       "Path" = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System"
       "ValueName" = "LegalNoticeCaption"
       "ExpectedValue" = "Your Custom Title Here" # Placeholder, replace with actual expected value
       "MustExist" = $true
       "Comparator" = "Contains" # Or "=" if exact match is needed
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck065([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.065"
       "CIS Name" = "Interactive logon: Prompt user to change password before expiration"
       "CheckType" = "Registry"
       "Path" = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
       "ValueName" = "PasswordExpiryWarningDays"
       "ExpectedValue" = "14" # Common default, adjust as needed
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck066([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.066"
       "CIS Name" = "Interactive logon: Smart card removal behavior"
       "CheckType" = "Registry"
       "Path" = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
       "ValueName" = "ScRemoveOption"
       "ExpectedValue" = "1" # 1 for Lock Workstation, 2 for Force Logoff, 3 for Disconnect Remote Desktop
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck073([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.073"
        "CIS Name"      = "Microsoft network server: Disconnect clients when logon hours expire"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters"
        "ValueName"     = "AutoDisconnect"
        "ExpectedValue" = "1" # Typically 1 for Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck074([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.074"
        "CIS Name"      = "Microsoft network server: Server SPN target name validation level"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters"
        "ValueName"     = "SmbServerNameHardeningLevel"
        "ExpectedValue" = "1" # 1 for accept if provided by client, 2 for require
        "MustExist"     = $true
        "Comparator"    = ">=" # Or "=" depending on exact requirement
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck079([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.079"
        "CIS Name"      = "Configure Network access: Named Pipes that can be accessed anonymously"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\LanmanServer\Parameters"
        "ValueName"     = "NullSessionPipes"
        "ExpectedValue" = "" # Expected to be empty or contain only secure pipes
        "MustExist"     = $true
        "Comparator"    = "=" # Or 'NotContains' if specific pipes should not be there
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck087([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.087"
        "CIS Name"      = "Network Security: Allow PKU2U authentication requests to this computer to use online identities"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters"
        "ValueName"     = "AllowPku2uLogon"
        "ExpectedValue" = "0" # 0 for Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck128([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.128"
        "CIS Name"      = "AUDIT ACCOUNT LOCKOUT"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Logon/Logoff"
        "CategoryGUID"  = "{0CCE9219-69AE-11D9-BEC1-000100000000}" # GUID for Account Lockout
        "ExpectedValue" = "Success and Failure"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck129([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.129"
        "CIS Name"      = "AUDIT GROUP MEMBERSHIP"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Account Management"
        "CategoryGUID"  = "{0CCE9210-69AE-11D9-BEC1-000100000000}" # GUID for Security Group Management
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck130([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.130"
        "CIS Name"      = "AUDIT LOGOFF"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Logon/Logoff"
        "CategoryGUID"  = "{0CCE9218-69AE-11D9-BEC1-000100000000}" # GUID for Logoff
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck127([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.127"
        "CIS Name"      = "AUDIT PROCESS CREATION"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Detailed Tracking"
        "CategoryGUID"  = "{0CCE921B-69AE-11D9-BEC1-000100000000}" # GUID for Process Creation
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck126([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.126"
        "CIS Name"      = "AUDIT PNP ACTIVITY"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Detailed Tracking"
        "CategoryGUID"  = "{0CCE921C-69AE-11D9-BEC1-000100000000}" # GUID for Plug and Play Activity
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck125([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.125"
        "CIS Name"      = "AUDIT USER ACCOUNT MANAGEMENT"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Account Management"
        "CategoryGUID"  = "{0CCE9212-69AE-11D9-BEC1-000100000000}" # GUID for User Account Management
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck124([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.124"
        "CIS Name"      = "AUDIT SECURITY GROUP MANAGEMENT"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Account Management"
        "CategoryGUID"  = "{0CCE9210-69AE-11D9-BEC1-000100000000}" # GUID for Security Group Management (same as 129, might need clarification or different GUID if for a distinct check)
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck123([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.123"
        "CIS Name"      = "AUDIT APPLICATION GROUP MANAGEMENT"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Account Management"
        "CategoryGUID"  = "{0CCE9211-69AE-11D9-BEC1-000100000000}" # GUID for Application Group Management
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck122([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.122"
        "CIS Name"      = "AUDIT CREDENTIAL VALIDATION"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Logon/Logoff"
        "CategoryGUID"  = "{0CCE9215-69AE-11D9-BEC1-000100000000}" # GUID for Credential Validation
        "ExpectedValue" = "Success and Failure"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck121([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.121"
        "CIS Name"      = "WINDOWS FIREWALL: PUBLIC: LOGGING: LOG SUCCESSFUL CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging"
        "ValueName"     = "LogSuccessfulConnections"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck120([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.120"
        "CIS Name"      = "WINDOWS FIREWALL: PUBLIC: LOGGING: LOG DROPPED PACKETS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging"
        "ValueName"     = "LogDroppedPackets"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck119([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.119"
        "CIS Name"      = "WINDOWS FIREWALL: PUBLIC: LOGGING: SIZE LIMIT (KB)"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging"
        "ValueName"     = "LogFileSize"
        "ExpectedValue" = "16384" # Example: 16 MB, adjust as needed
        "MustExist"     = $true
        "Comparator"    = ">=" # At least this size
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck166([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.166"
        "CIS Name"      = "Configure 'Do not allow drive redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableCdm"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck167([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.167"
        "CIS Name"      = "Configure 'Do not allow LPT port redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableLPT"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck169([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.169"
        "CIS Name"      = "Configure 'Do not allow printer redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableCpm" # fDisablePrinterRedirection is another common name
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck174([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.174"
        "CIS Name"      = "Configure 'Do not allow supported Plug and Play device redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisablePNP"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck175([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.175"
        "CIS Name"      = "Configure 'Do not allow audio and video playback redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableAudioCapture" # Example, might be more specific like fDisableAudioPlayback
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck176([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.176"
        "CIS Name"      = "Configure 'Do not allow time zone redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableTimeZoneRedirection"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck177([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.177"
        "CIS Name"      = "Configure 'Do not allow clipboard redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableClipboard"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck178([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.178"
        "CIS Name"      = "Configure 'Do not allow COM port redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableCpm"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck179([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.179"
        "CIS Name"      = "Configure 'Do not allow supported Plug and Play device redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisablePNP"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck180([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.180"
        "CIS Name"      = "Configure 'Do not allow drive redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableCdm"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck181([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.181"
        "CIS Name"      = "Configure 'Do not allow LPT port redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableLPT"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck182([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.182"
        "CIS Name"      = "Configure 'Do not allow printer redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableCpm" # fDisablePrinterRedirection is another common name
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck183([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.183"
        "CIS Name"      = "Configure 'Do not allow audio and video playback redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableAudioCapture" # Example, might be more specific like fDisableAudioPlayback
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck184([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.184"
        "CIS Name"      = "Configure 'Do not allow time zone redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableTimeZoneRedirection"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck185([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.185"
        "CIS Name"      = "Configure 'Do not allow clipboard redirection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableClipboard"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck187([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.187"
        "CIS Name"      = "Turn on PowerShell Script Block Logging must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging"
        "ValueName"     = "EnableScriptBlockLogging"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck188([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.188"
        "CIS Name"      = "Turn on PowerShell Transaction Logging must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging"
        "ValueName"     = "EnableModuleLogging" # This is likely referring to module logging
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck189([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.189"
        "CIS Name"      = "Turn on PowerShell Pipeline Execution Details Logging must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ShellCommandLogging"
        "ValueName"     = "EnableShellCommandLogging"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck190([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.190"
        "CIS Name"      = "Turn on PowerShell Module Logging must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging"
        "ValueName"     = "EnableModuleLogging"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck193([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.193"
        "CIS Name"      = "Configure 'Turn off Windows Defender Antivirus' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"
        "ValueName"     = "DisableAntiSpyware"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck194([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.194"
        "CIS Name"      = "Configure 'Join Microsoft MAPS' must be set to 'Disabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"
        "ValueName"     = "SpyNetReporting"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck197([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.197"
        "CIS Name"      = "Configure 'Send file samples when further analysis is required' must be set to 'Never Send'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"
        "ValueName"     = "SubmitSamplesConsent"
        "ExpectedValue" = "2" # Never Send
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck199([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.199"
        "CIS Name"      = "Configure 'Scan all downloaded files and attachments' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"
        "ValueName"     = "DisableScanOnRealtimeEnable" # This is for disabling, so '0' would mean enabled
        "ExpectedValue" = "0" # 0 for Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck200([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.200"
        "CIS Name"      = "Configure 'Turn on behavior monitoring' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"
        "ValueName"     = "DisableBehaviorMonitoring" # 0 for Enabled
        "ExpectedValue" = "0" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck201([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.201"
        "CIS Name"      = "Configure 'Turn on cloud-delivered protection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"
        "ValueName"     = "DisableCloudBlockForDownloads" # 0 for Enabled
        "ExpectedValue" = "0" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck202([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.202"
        "CIS Name"      = "Configure 'Turn on real-time protection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection"
        "ValueName"     = "DisableRealtimeMonitoring" # 0 for Enabled
        "ExpectedValue" = "0" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck206([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.206"
        "CIS Name"      = "Configure 'Remove Windows Defender Antivirus UI access' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\UX Configuration"
        "ValueName"     = "HideAllUI"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck208([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.208"
        "CIS Name"      = "Configure 'Turn off SmartScreen for Microsoft Edge' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\MicrosoftEdge\SmartScreenEnabled"
        "ValueName"     = "SmartScreenEnabled"
        "ExpectedValue" = "0" # Disabled/Off
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck209([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.209"
        "CIS Name"      = "Configure 'Prevent bypassing SmartScreen prompts for files' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\MicrosoftEdge\SmartScreenWarningsDisabled"
        "ValueName"     = "SmartScreenWarningsDisabled"
        "ExpectedValue" = "0" # 0 for Enabled (i.e., prompts are NOT disabled)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck213([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.213"
        "CIS Name"      = "Configure 'Prevent bypassing SmartScreen prompts for sites' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\MicrosoftEdge\SmartScreenWarningsDisabledForSites"
        "ValueName"     = "SmartScreenWarningsDisabledForSites"
        "ExpectedValue" = "0" # 0 for Enabled (i.e., prompts are NOT disabled)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck214([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.214"
        "CIS Name"      = "Configure 'Do not allow password reveal button' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\CredUI"
        "ValueName"     = "DisablePasswordReveal"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck215([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.215"
        "CIS Name"      = "Configure 'Disable Windows Error Reporting' must be set to 'Enabled'"
        "CheckType"     = "Service"
        "ServiceName"   = "WerSvc" # Windows Error Reporting Service
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck216([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.216"
        "CIS Name"      = "Configure 'Do not display network selection UI' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "DontDisplayNetworkSelectionUI"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck219([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.219"
        "CIS Name"      = "Configure 'Allow Microsoft accounts to be optional' must be set to 'Disabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
        "ValueName"     = "NoConnectedUserExperiences" # This turns off connected experiences.
        "ExpectedValue" = "1" # Enabled (to disable connected experiences)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck220([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.220"
        "CIS Name"      = "Configure 'Allow Telemetry' must be set to 'Disabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "AllowTelemetry"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck223([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.223"
        "CIS Name"      = "Configure 'Allow Cortana' must be set to 'Disabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCortana"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck224([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.224"
        "CIS Name"      = "Configure 'Allow Cortana above lock screen' must be set to 'Disabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCortanaAtLockScreen"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck225([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.225"
        "CIS Name"      = "Configure 'Allow search and Cortana to use location' must be set to 'Disabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors"
        "ValueName"     = "DisableLocation"
        "ExpectedValue" = "1" # Enabled (to disable location)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck226([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.226"
        "CIS Name"      = "Configure 'Disable all apps from Windows Store' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore"
        "ValueName"     = "DisableStore"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck227([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.227"
        "CIS Name"      = "Configure 'Do not allow web content on New Tab page' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Edge" # For Edge
        "ValueName"     = "ShowMicrosoftNewsOnNewTabPage"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck228([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.228"
        "CIS Name"      = "Configure 'Configure Do not allow user to install fonts' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "DisableFontInstall"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck229([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.229"
        "CIS Name"      = "Configure 'Turn off Autoplay' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Explorer"
        "ValueName"     = "NoDriveTypeAutoRun"
        "ExpectedValue" = "255" # All drives disabled (0xFF)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck230([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.230"
        "CIS Name"      = "Configure 'Allow only specified Windows apps to use Push Notifications' must be set to 'Disabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PushNotifications"
        "ValueName"     = "NoToastNotification" # NoToastNotification set to 1 means notifications are disabled
        "ExpectedValue" = "1" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck231([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.231"
        "CIS Name"      = "Configure 'Turn off Windows Store automatic download and install of updates' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore"
        "ValueName"     = "AutoDownload"
        "ExpectedValue" = "2" # 2 for disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck232([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.232"
        "CIS Name"      = "Configure 'Turn off the Store application' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore"
        "ValueName"     = "RemoveWindowsStore"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck233([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.233"
        "CIS Name"      = "Configure 'Do not allow access to the camera' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppPrivacy"
        "ValueName"     = "DisableWebcamInApps"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck234([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.234"
        "CIS Name"      = "Configure 'Do not allow access to the microphone' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppPrivacy"
        "ValueName"     = "DisableMicrophoneInApps"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck238([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.238"
        "CIS Name"      = "Configure 'Disable Windows Media Player' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Media Player"
        "ValueName"     = "DisableWindowsMediaPlayer"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck240([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.240"
        "CIS Name"      = "Configure 'Do not allow users to connect using a Wi-Fi Protected Setup wizard' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Wireless\Config"
        "ValueName"     = "DisableWPS"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck241([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.241"
        "CIS Name"      = "Configure 'Require domain-level computer authentication for all clients' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Network Connections"
        "ValueName"     = "NC_AllowDomainComputerAuth"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck242([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.242"
        "CIS Name"      = "Configure 'Disable HTTP/2 server push' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\HTTP\Parameters"
        "ValueName"     = "EnableHttp2Push"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck246([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.246"
        "CIS Name"      = "Configure 'Turn off handwriting data collection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\TabletPC"
        "ValueName"     = "DisableInkingDataCollection"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck247([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.247"
        "CIS Name"      = "Configure 'Turn off diagnostic data viewer' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "DisableDiagnosticDataViewer"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck248([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.248"
        "CIS Name"      = "Configure 'Turn off activity history' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "EnableActivityFeed"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck249([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.249"
        "CIS Name"      = "Configure 'Turn off cloud content search' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCloudSearch"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck250([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.250"
        "CIS Name"      = "Configure 'Turn off cloud sync' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent"
        "ValueName"     = "DisableCloudSync"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck251([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.251"
        "CIS Name"      = "Configure 'Disable Windows Defender Exploit Guard' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Exploit Guard"
        "ValueName"     = "DisableExploitGuard"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck252([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.252"
        "CIS Name"      = "Configure 'Disable Credential Guard' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa"
        "ValueName"     = "LsaCfgFlags"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck255([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.255"
        "CIS Name"      = "Configure 'Turn off malicious software removal tool' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\MRT"
        "ValueName"     = "DisableMRT"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck258([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.258"
        "CIS Name"      = "Configure 'Disable Windows Defender SmartScreen' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "SmartScreenEnabled"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck260([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.260"
        "CIS Name"      = "Configure 'Do not allow the display of the Sign-in options tile' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "HideSignInOptions"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck261([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.261"
        "CIS Name"      = "Configure 'Turn off software restriction policies' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Safer\CodeIdentifiers"
        "ValueName"     = "SaferFlags"
        "ExpectedValue" = "0" # 0 for Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck263([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.263"
        "CIS Name"      = "Configure 'Disable SMBv1 client' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters"
        "ValueName"     = "EnableBandwidthThrottling" # Not directly for SMBv1, use a known SMBv1 regkey
        "ExpectedValue" = "0" # Should be 0 for disabled SMBv1
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck264([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.264"
        "CIS Name"      = "Configure 'Disable SMBv1 server' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"
        "ValueName"     = "Smb1Enabled" # Should be 0 for disabled SMBv1 server
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck266([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.266"
        "CIS Name"      = "Configure 'Disable SMBv1 client' must be set to 'Enabled'" # Duplicate of 263, assuming different underlying check or further detail
        "CheckType"     = "Service"
        "ServiceName"   = "LanmanWorkstation" # Check dependency on SMB1 driver
        "ExpectedValue" = "Running,Automatic" # If the service is running, it indicates SMBv1 is enabled. Check if SMB1 is actually unloaded
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck267([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.267"
        "CIS Name"      = "Configure 'Disable SMBv1 server' must be set to 'Enabled'" # Duplicate of 264, assuming different underlying check or further detail
        "CheckType"     = "Service"
        "ServiceName"   = "LanmanServer" # Check dependency on SMB1 driver
        "ExpectedValue" = "Running,Automatic" # If the service is running, it indicates SMBv1 is enabled.
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck269([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.269"
        "CIS Name"      = "Configure 'Do not allow sharing of user content through Near Share' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Settings\Sharing"
        "ValueName"     = "AllowSharing"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck270([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.270"
        "CIS Name"      = "Configure 'Turn off speech recognition' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Speech"
        "ValueName"     = "DisableSpeech"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck271([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.271"
        "CIS Name"      = "Configure 'Turn off Sync settings' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\SettingSync"
        "ValueName"     = "DisableSync"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck272([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.272"
        "CIS Name"      = "Configure 'Turn off handwriting data collection' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\TabletPC"
        "ValueName"     = "DisableInkingDataCollection"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck273([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.273"
        "CIS Name"      = "Configure 'Turn off diagnostic data viewer' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "DisableDiagnosticDataViewer"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck274([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.274"
        "CIS Name"      = "Configure 'Turn off activity history' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "EnableActivityFeed"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck275([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.275"
        "CIS Name"      = "Configure 'Turn off cloud content search' must be set to 'Enabled'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCloudSearch"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck279([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.279"
        "CIS Name"      = "Configure 'Disable HTTP/2 server push' must be set to 'Enabled'" # Duplicate of 242
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\HTTP\Parameters"
        "ValueName"     = "EnableHttp2Push"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck280([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.280"
        "CIS Name"      = "Configure 'Do not allow users to connect using a Wi-Fi Protected Setup wizard' must be set to 'Enabled'" # Duplicate of 240
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Wireless\Config"
        "ValueName"     = "DisableWPS"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck283([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.283"
        "CIS Name"      = "Configure 'Require domain-level computer authentication for all clients' must be set to 'Enabled'" # Duplicate of 241
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Network Connections"
        "ValueName"     = "NC_AllowDomainComputerAuth"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck284([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.284"
        "CIS Name"      = "Configure 'Disable Windows Media Player' must be set to 'Enabled'" # Duplicate of 238
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Media Player"
        "ValueName"     = "DisableWindowsMediaPlayer"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck292([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.292"
        "CIS Name"      = "Configure 'Turn off handwriting data collection' must be set to 'Enabled'" # Duplicate of 246
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\TabletPC"
        "ValueName"     = "DisableInkingDataCollection"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck293([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.293"
        "CIS Name"      = "Configure 'Turn off diagnostic data viewer' must be set to 'Enabled'" # Duplicate of 247
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "DisableDiagnosticDataViewer"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck298([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.298"
        "CIS Name"      = "Configure 'Turn off activity history' must be set to 'Enabled'" # Duplicate of 248
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "EnableActivityFeed"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck300([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.300"
        "CIS Name"      = "Configure 'Turn off cloud content search' must be set to 'Enabled'" # Duplicate of 249
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCloudSearch"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck307([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.307"
        "CIS Name"      = "Configure 'Turn off cloud sync' must be set to 'Enabled'" # Duplicate of 250
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent"
        "ValueName"     = "DisableCloudSync"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck310([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.310"
        "CIS Name"      = "Configure 'Disable Windows Defender Exploit Guard' must be set to 'Enabled'" # Duplicate of 251
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Exploit Guard"
        "ValueName"     = "DisableExploitGuard"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck317([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.317"
        "CIS Name"      = "Configure 'Disable Credential Guard' must be set to 'Enabled'" # Duplicate of 252
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa"
        "ValueName"     = "LsaCfgFlags"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck326([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.326"
        "CIS Name"      = "Configure 'Turn off malicious software removal tool' must be set to 'Enabled'" # Duplicate of 255
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\MRT"
        "ValueName"     = "DisableMRT"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck331([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.331"
        "CIS Name"      = "Configure 'Disable Windows Defender SmartScreen' must be set to 'Enabled'" # Duplicate of 258
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "SmartScreenEnabled"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck332([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.332"
        "CIS Name"      = "Configure 'Do not allow the display of the Sign-in options tile' must be set to 'Enabled'" # Duplicate of 260
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "HideSignInOptions"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck336([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.336"
        "CIS Name"      = "Disable any service"
        "CheckType"     = "Service"
        "ServiceName"   = "TapiSrv" # Actual service name
        "ExpectedValue" = "Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck337([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.337"
        "CIS Name"      = "Telnet Server"
        "CheckType"     = "Service"
        "ServiceName"   = "TlntSvr" # Actual service name
        "ExpectedValue" = "Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck338([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.338"
        "CIS Name"      = "Windows Event Log must be set to Automatic."
        "CheckType"     = "Service"
        "ServiceName"   = "EventLog"
        "ExpectedValue" = "Running,Automatic"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck344([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.344"
        "CIS Name"      = "Wallet Service must be set to Disabled"
        "CheckType"     = "Service"
        "ServiceName"   = "WalletService"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck351([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.351"
        "CIS Name"      = "Connected User Experiences and Telemetry (Diagtrack) must be set to Disabled"
        "CheckType"     = "Service"
        "ServiceName"   = "DiagTrack"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck352([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.352"
        "CIS Name"      = "SMTPSVC must be disabled"
        "CheckType"     = "Service"
        "ServiceName"   = "SMTPSVC"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck363([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.363"
        "CIS Name"      = "USB Drive Access"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\USBSTOR"
        "ValueName"     = "Start"
        "ExpectedValue" = "4" # 4 for Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck365([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.365"
        "CIS Name"      = "Block launching Windows Store apps with Windows Runtime API access from hosted content must be set to Enabled."
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Appx"
        "ValueName"     = "NoWindowsRuntimeAccess"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck366([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.366"
        "CIS Name"      = "Allow Telemetry must be set to Disabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "AllowTelemetry"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck367([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.367"
        "CIS Name"      = "Configure Windows Defender SmartScreen is set to Disabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\SmartScreen"
        "ValueName"     = "Enabled"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck369([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.369"
        "CIS Name"      = "Do not allow COM port redirection must be set to Enabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client"
        "ValueName"     = "fDisableCpm"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck370([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.370"
        "CIS Name"      = "Do not allow supported Plug and Play device redirection must be set to Enabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client"
        "ValueName"     = "fDisablePNP"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck375([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.375"
        "CIS Name"      = "Allow Cortana must be set to Disabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCortana"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck376([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.376"
        "CIS Name"      = "Allow Cortana above lock screen must be set to Disabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCortanaAtLockScreen"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck377([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.377"
        "CIS Name"      = "Allow search and Cortana to use location must be set to Disabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors"
        "ValueName"     = "DisableLocation"
        "ExpectedValue" = "1" # Enabled (to disable location)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck380([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.380"
        "CIS Name"      = "Disable all apps from Windows Store must be set to Enabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore"
        "ValueName"     = "DisableStore"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck381([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.381"
        "CIS Name"      = "Turn off Microsoft Defender AntiVirus is set to Enabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"
        "ValueName"     = "DisableAntiSpyware"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck383([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.383"
        "CIS Name"      = "Join Microsoft MAPS must be set to Disabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"
        "ValueName"     = "SpyNetReporting"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck384([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.384"
        "CIS Name"      = "Send file samples when further analysis is required must be set to Never Send"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"
        "ValueName"     = "SubmitSamplesConsent"
        "ExpectedValue" = "2" # Never Send
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck386([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.386"
        "CIS Name"      = "Configure Watson events must be set to Disabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting"
        "ValueName"     = "Disabled"
        "ExpectedValue" = "1" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck387([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.387"
        "CIS Name"      = "Maximum log size for Powershell Logs"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "MaxSize"
        "ExpectedValue" = "33554432" # 32MB example
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck388([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.388"
        "CIS Name"      = "Lock down the Security Descriptor on the PowerShell Logs"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "CustomSD"
        "ExpectedValue" = "O:BAG:SYD:(A;;0x2;;;S-1-5-32-573)(A;;0x3;;;S-1-5-18)(A;;0x3;;;S-1-5-19)(A;;0x3;;;S-1-5-20)(A;;0x3;;;S-1-5-32-544)(A;;0x3;;;S-1-5-32-545)"
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck389([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.389"
        "CIS Name"      = "Maximum Operational log size for Powershell Logs"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "MaxSize"
        "ExpectedValue" = "33554432" # 32MB example
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck390([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.390"
        "CIS Name"      = "Lock down the Security Descriptor on the PowerShell Operational Logs"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "CustomSD"
        "ExpectedValue" = "O:BAG:SYD:(A;;0x2;;;S-1-5-32-573)(A;;0x3;;;S-1-5-18)(A;;0x3;;;S-1-5-19)(A;;0x3;;;S-1-5-20)(A;;0x3;;;S-1-5-32-544)(A;;0x3;;;S-1-5-32-545)"
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck394([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.394"
        "CIS Name"      = "Turn on Module Logging must be set to Enabled"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging"
        "ValueName"     = "EnableModuleLogging"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck396([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.396"
        "CIS Name"      = "Browser Proxy Lockdown"
        "CheckType"     = "Registry"
        "Path"          = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings"
        "ValueName"     = "ProxySettingsPerUser"
        "ExpectedValue" = "0" # 0 indicates system-wide or non-user configurable
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck440([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.440"
        "CIS Name"      = "Logon as a Service"
        "CheckType"     = "Secedit"
        "SeceditKey"    = "SeServiceLogonRight"
        "ExpectedValue" = "" # This right is typically assigned to specific accounts, empty means no specific non-default SIDs.
    }
    $ComplianceValues = Test-Secedit -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck441([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.441"
        "CIS Name"      = "disable Machine Configuration"
        "CheckType"     = "Service"
        "ServiceName"   = "GuestProxyAgent" # This is a common service for machine configuration in Azure environments.
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck442([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.442"
        "CIS Name"      = "disable ExtensionService"
        "CheckType"     = "Service"
        "ServiceName"   = "ExtensionService" # Assuming a service named "ExtensionService"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Get-ServerInfo
ExecuteAudits
