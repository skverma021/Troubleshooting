<#
.SYNOPSIS
   This script is used to check the compliance of Windows Server 2022 with specific baselines.
.DESCRIPTION
   The script checks the compliance of Windows Server 2022 with specific baselines defined in the BASELINE_DICT.
   It logs the results and creates a JSON file with the compliance details.
.PARAMETER week_release
   This parameter is used to specify the week of the release. It is not mandatory.
.EXAMPLE
   .\WIN2022.ps1 -release_package "2025W20-0"
   This command runs the script with the specified week release.
   Default value is "2025W13-0".
#>
param(
   [parameter(Mandatory = $false)]
   [string]$release_package = "2022W13-0" # Updated default release package for clarity
)

#----------------------------------------------------------
#       Set Logging/Troubleshooting Options
#----------------------------------------------------------
If ($PSBoundParameters['Debug']){
   $DebugPreference = 'Continue'
   $Script:Debug = $false
}
#----------------------------------------------------------
#       Setup variables needed for the base script
#----------------------------------------------------------
$ErrorActionPreference = "SilentlyContinue"

# D or SystemDrive
if(Test-Path -Path "D:"){
   $appsDrive = 'D:'
}else{
   $appsDrive = $env:SystemDrive
}

$Global:OS_PRODUCT = "WIN2022"
$Global:COMPLIANCE_DICTIONARY = @{}
$Global:ComplianceFile = "$appsDrive\apps\MOCAT\OS\logs\WIN_OS_Compliance.json"
#$Global:ComplianceFile = "$env:userprofile/WIN_OS_Compliance.json"
$Script:ExitCode = 0

#----------------------------------------------------------
# Setup Logging
$LogFile = "$appsDrive\apps\MOCAT\OS\logs\win_os_compliance.log"
$Script:AllValuesToLog = $true
If (Test-Path $LogFile) { Remove-Item $LogFile -Force }

#-----------------------------------------------------------
#Set up Audit files
$Script:AuditPolResults = "C:\temp\audit_auditpol_results.txt"
$Script:SeceditResults = "C:\temp\audit_secedit_results.txt"
Remove-Item $AuditPolResults -Force -WhatIf:$false -ErrorAction SilentlyContinue
Remove-Item $SeceditResults -Force -WhatIf:$false -ErrorAction SilentlyContinue

# BASELINES these are used to run BaselineCheck{} dynamically
$Global:BASELINE_DICT = @{
    '009' = 'ISBL-10564-01.009' # ALLOW ADMINISTRATOR ACCOUNT LOCKOUT
    '043' = 'ISBL-10564-01.043' # REPLACE A PROCESS LEVEL TOKEN
    '055' = 'ISBL-10564-01.055' # DOMAIN MEMBER: DIGITALLY ENCRYPT SECURE CHANNEL DATA (WHEN POSSIBLE)
    '064' = 'ISBL-10564-01.064' # CONFIGURE INTERACTIVE LOGON: MESSAGE TITLE FOR USERS ATTEMPTING TO LOG ON
    '065' = 'ISBL-10564-01.065' # INTERACTIVE LOGON: PROMPT USER TO CHANGE PASSWORD BEFORE EXPIRATION
    '066' = 'ISBL-10564-01.066' # INTERACTIVE LOGON: SMART CARD REMOVAL BEHAVIOR
    '073' = 'ISBL-10564-01.073' # MICROSOFT NETWORK SERVER: DISCONNECT CLIENTS WHEN LOGON HOURS EXPIRE
    '074' = 'ISBL-10564-01.074' # MICROSOFT NETWORK SERVER: SERVER SPN TARGET NAME VALIDATION LEVEL
    '079' = 'ISBL-10564-01.079' # CONFIGURE NETWORK ACCESS: NAMED PIPES THAT CAN BE ACCESSED ANONYMOUSLY
    '087' = 'ISBL-10564-01.087' # NETWORK SECURITY: ALLOW PKU2U AUTHENTICATION REQUESTS TO THIS COMPUTER TO USE ONLINE IDENTITIES
    '089' = 'ISBL-10564-01.089' # NETWORK SECURITY: FORCE LOGOFF WHEN LOGON HOURS EXPIRE
    '094' = 'ISBL-10564-01.094' # NETWORK SECURITY: RESTRICT NTLM: AUDIT INCOMING NTLM TRAFFIC
    '095' = 'ISBL-10564-01.095' # NETWORK SECURITY: RESTRICT NTLM: OUTGOING NTLM TRAFFIC TO REMOTE SERVERS
    '099' = 'ISBL-10564-01.099' # WINDOWS FIREWALL: DOMAIN: FIREWALL STATE
    '100' = 'ISBL-10564-01.100' # WINDOWS FIREWALL: DOMAIN: INBOUND CONNECTIONS
    '102' = 'ISBL-10564-01.102' # WINDOWS FIREWALL: DOMAIN: LOGGING: NAME
    '106' = 'ISBL-10564-01.106' # WINDOWS FIREWALL: PRIVATE: FIREWALL STATE
    '109' = 'ISBL-10564-01.109' # WINDOWS FIREWALL: PRIVATE: LOGGING: NAME
    '112' = 'ISBL-10564-01.112' # WINDOWS FIREWALL: PRIVATE: LOGGING: LOG SUCCESSFUL CONNECTIONS
    '114' = 'ISBL-10564-01.114' # WINDOWS FIREWALL: PUBLIC: INBOUND CONNECTIONS
    '118' = 'ISBL-10564-01.118' # WINDOWS FIREWALL: PUBLIC: LOGGING: NAME
    '119' = 'ISBL-10564-01.119' # WINDOWS FIREWALL: PUBLIC: LOGGING: SIZE LIMIT (KB)
    '120' = 'ISBL-10564-01.120' # WINDOWS FIREWALL: PUBLIC: LOGGING: LOG DROPPED PACKETS
    '121' = 'ISBL-10564-01.121' # WINDOWS FIREWALL: PUBLIC: LOGGING: LOG SUCCESSFUL CONNECTIONS
    '122' = 'ISBL-10564-01.122' # AUDIT CREDENTIAL VALIDATION
    '123' = 'ISBL-10564-01.123' # AUDIT APPLICATION GROUP MANAGEMENT
    '124' = 'ISBL-10564-01.124' # AUDIT SECURITY GROUP MANAGEMENT
    '125' = 'ISBL-10564-01.125' # AUDIT USER ACCOUNT MANAGEMENT
    '126' = 'ISBL-10564-01.126' # AUDIT PNP ACTIVITY
    '127' = 'ISBL-10564-01.127' # AUDIT PROCESS CREATION
    '128' = 'ISBL-10564-01.128' # AUDIT ACCOUNT LOCKOUT
    '129' = 'ISBL-10564-01.129' # AUDIT GROUP MEMBERSHIP
    '130' = 'ISBL-10564-01.130' # AUDIT LOGOFF
    '145' = 'ISBL-10564-01.145' # AUDIT OTHER SYSTEM EVENTS
    '152' = 'ISBL-10564-01.152' # APPLY UAC RESTRICTIONS TO LOCAL ACCOUNTS ON NETWORK LOGONS
    '153' = 'ISBL-10564-01.153' # CONFIGURE RPC PACKET LEVEL PRIVACY SETTING FOR INCOMING CONNECTIONS
    '156' = 'ISBL-10564-01.156' # ENABLE CERTIFICATE PADDING
    '158' = 'ISBL-10564-01.158' # NETBT NODETYPE CONFIGURATION
    '159' = 'ISBL-10564-01.159' # WDIGEST AUTHENTICATION
    '160' = 'ISBL-10564-01.160' # MSS: (AUTOADMINLOGON) ENABLE AUTOMATIC LOGON
    '161' = 'ISBL-10564-01.161' # MSS: (DISABLEIPSOURCEROUTING IPV6) IP SOURCE ROUTING PROTECTION LEVEL
    '162' = 'ISBL-10564-01.162' # MSS: (DISABLEIPSOURCEROUTING) IP SOURCE ROUTING PROTECTION LEVEL
    '164' = 'ISBL-10564-01.164' # MSS: (NONAMERELEASEONDEMAND) ALLOW THE COMPUTER TO IGNORE NETBIOS NAME RELEASE REQUESTS EXCEPT FROM WINS SERVERS
    '165' = 'ISBL-10564-01.165' # MSS: (SAFEDLLSEARCHMODE) ENABLE SAFE DLL SEARCH MODE
    '166' = 'ISBL-10564-01.166' # MSS: (SCREENSAVERGRACEPERIOD) THE TIME IN SECONDS BEFORE THE SCREEN SAVER GRACE PERIOD EXPIRES
    '167' = 'ISBL-10564-01.167' # CONFIGURE NETBIOS SETTINGS
    '169' = 'ISBL-10564-01.169' # CONFIGURE DNS OVER HTTPS (DOH) NAME RESOLUTION
    '174' = 'ISBL-10564-01.174' # HARDENED UNC PATHS
    '175' = 'ISBL-10564-01.175' # MINIMIZE THE NUMBER OF SIMULTANEOUS CONNECTIONS TO THE INTERNET OR A WINDOWS DOMAIN
    '176' = 'ISBL-10564-01.176' # CONFIGURE REDIRECTION GUARD
    '177' = 'ISBL-10564-01.177' # CONFIGURE RPC CONNECTION SETTINGS: PROTOCOL TO USE FOR OUTGOING RPC CONNECTIONS
    '178' = 'ISBL-10564-01.178' # CONFIGURE RPC CONNECTION SETTINGS: USE AUTHENTICATION FOR OUTGOING RPC CONNECTIONS
    '179' = 'ISBL-10564-01.179' # CONFIGURE RPC LISTENER SETTINGS: PROTOCOLS TO ALLOW FOR INCOMING RPC CONNECTIONS
    '180' = 'ISBL-10564-01.180' # CONFIGURE RPC LISTENER SETTINGS: AUTHENTICATION PROTOCOL TO USE FOR INCOMING RPC CONNECTIONS
    '181' = 'ISBL-10564-01.181' # CONFIGURE RPC OVER TCP PORT
    '182' = 'ISBL-10564-01.182' # LIMITS PRINT DRIVER INSTALLATION TO ADMINISTRATORS
    '183' = 'ISBL-10564-01.183' # MANAGE PROCESSING OF QUEUE-SPECIFIC FILES
    '184' = 'ISBL-10564-01.184' # POINT AND PRINT RESTRICTIONS: WHEN INSTALLING DRIVERS FOR A NEW CONNECTION
    '185' = 'ISBL-10564-01.185' # POINT AND PRINT RESTRICTIONS: WHEN UPDATING DRIVERS FOR AN EXISTING CONNECTION
    '187' = 'ISBL-10564-01.187' # ENCRYPTION ORACLE REMEDIATION
    '188' = 'ISBL-10564-01.188' # REMOTE HOST ALLOWS DELEGATION OF NON-EXPORTABLE CREDENTIALS
    '189' = 'ISBL-10564-01.189' # PREVENT DEVICE METADATA RETRIEVAL FROM THE INTERNET
    '190' = 'ISBL-10564-01.190' # BOOT-START DRIVER INITIALIZATION POLICY
    '193' = 'ISBL-10564-01.193' # CONFIGURE SECURITY POLICY PROCESSING: DO NOT APPLY DURING PERIODIC BACKGROUND PROCESSING
    '194' = 'ISBL-10564-01.194' # CONFIGURE SECURITY POLICY PROCESSING: PROCESS EVEN IF THE GROUP POLICY OBJECTS HAVE NOT CHANGED
    '197' = 'ISBL-10564-01.197' # TURN OFF DOWNLOADING OF PRINT DRIVERS OVER HTTP
    '199' = 'ISBL-10564-01.199' # ENUMERATION POLICY FOR EXTERNAL DEVICES INCOMPATIBLE WITH KERNEL DMA PROTECTION
    '200' = 'ISBL-10564-01.200' # ALLOW CUSTOM SSPS AND APS TO BE LOADED INTO LSASS
    '201' = 'ISBL-10564-01.201' # BLOCK USER FROM SHOWING ACCOUNT DETAILS ON SIGN-IN
    '202' = 'ISBL-10564-01.202' # DO NOT DISPLAY NETWORK SELECTION UI
    '206' = 'ISBL-10564-01.206' # TURN OFF PICTURE PASSWORD SIGN-IN
    '208' = 'ISBL-10564-01.208' # REQUIRE A PASSWORD WHEN A COMPUTER WAKES (ON BATTERY)
    '209' = 'ISBL-10564-01.209' # REQUIRE A PASSWORD WHEN A COMPUTER WAKES (PLUGGED IN)
    '213' = 'ISBL-10564-01.213' # ENABLE WINDOWS NTP SERVER
    '214' = 'ISBL-10564-01.214' # ALLOW MICROSOFT ACCOUNTS TO BE OPTIONAL
    '215' = 'ISBL-10564-01.215' # DISALLOW AUTOPLAY FOR NON-VOLUME DEVICES
    '216' = 'ISBL-10564-01.216' # SET THE DEFAULT BEHAVIOR FOR AUTORUN
    '219' = 'ISBL-10564-01.219' # TURN OFF CLOUD CONSUMER ACCOUNT STATE CONTENT
    '220' = 'ISBL-10564-01.220' # TURN OFF MICROSOFT CONSUMER EXPERIENCES
    '223' = 'ISBL-10564-01.223' # ENUMERATE ADMINISTRATOR ACCOUNTS ON ELEVATION
    '224' = 'ISBL-10564-01.224' # ALLOW DIAGNOSTIC DATA
    '225' = 'ISBL-10564-01.225' # DISABLE ONESETTINGS DOWNLOADS
    '226' = 'ISBL-10564-01.226' # DO NOT SHOW FEEDBACK NOTIFICATIONS
    '227' = 'ISBL-10564-01.227' # ENABLE ONESETTINGS AUDITING
    '228' = 'ISBL-10564-01.228' # LIMIT DIAGNOSTIC LOG COLLECTION
    '229' = 'ISBL-10564-01.229' # LIMIT DUMP COLLECTION
    '230' = 'ISBL-10564-01.230' # TOGGLE USER CONTROL OVER INSIDER BUILDS
    '231' = 'ISBL-10564-01.231' # ENABLE APP INSTALLER
    '232' = 'ISBL-10564-01.232' # ENABLE APP INSTALLER EXPERIMENTAL FEATURES
    '233' = 'ISBL-10564-01.233' # ENABLE APP INSTALLER HASH OVERRIDE
    '234' = 'ISBL-10564-01.234' # ENABLE APP INSTALLER MS-APPINSTALLER PROTOCOL
    '238' = 'ISBL-10564-01.238' # SECURITY: SPECIFY THE MAXIMUM LOG FILE SIZE (KB)
    '240' = 'ISBL-10564-01.240' # SETUP: SPECIFY THE MAXIMUM LOG FILE SIZE (KB)
    '241' = 'ISBL-10564-01.241' # SYSTEM: CONTROL EVENT LOG BEHAVIOR WHEN THE LOG FILE REACHES ITS MAXIMUM SIZE
    '242' = 'ISBL-10564-01.242' # SYSTEM: SPECIFY THE MAXIMUM LOG FILE SIZE (KB)
    '246' = 'ISBL-10564-01.246' # BLOCK ALL CONSUMER MICROSOFT ACCOUNT USER AUTHENTICATION
    '247' = 'ISBL-10564-01.247' # CONFIGURE LOCAL SETTING OVERRIDE FOR REPORTING TO MICROSOFT MAPS
    '248' = 'ISBL-10564-01.248' # PREVENT THE USAGE OF ONEDRIVE FOR FILE STORAGE
    '249' = 'ISBL-10564-01.249' # DO NOT ALLOW PASSWORDS TO BE SAVED
    '250' = 'ISBL-10564-01.250' # DO NOT ALLOW DRIVE REDIRECTION
    '251' = 'ISBL-10564-01.251' # ALWAYS PROMPT FOR PASSWORD UPON CONNECTION
    '252' = 'ISBL-10564-01.252' # REQUIRE SECURE RPC COMMUNICATION
    '255' = 'ISBL-10564-01.255' # DO NOT USE TEMPORARY FOLDERS PER SESSION
    '258' = 'ISBL-10564-01.258' # ALLOW WINDOWS INK WORKSPACE
    '260' = 'ISBL-10564-01.260' # ALWAYS INSTALL WITH ELEVATED PRIVILEGES
    '261' = 'ISBL-10564-01.261' # ENABLE MPR NOTIFICATIONS FOR THE SYSTEM
    '263' = 'ISBL-10564-01.263' # ALLOW BASIC AUTHENTICATION
    '264' = 'ISBL-10564-01.264' # ALLOW UNENCRYPTED TRAFFIC
    '266' = 'ISBL-10564-01.266' # ALLOW BASIC AUTHENTICATION (DUPLICATE, WILL BE REMOVED IF NO UNIQUE USE)
    '267' = 'ISBL-10564-01.267' # ALLOW UNENCRYPTED TRAFFIC (DUPLICATE, WILL BE REMOVED IF NO UNIQUE USE)
    '269' = 'ISBL-10564-01.269' # PREVENT USERS FROM MODIFYING SETTINGS
    '270' = 'ISBL-10564-01.270' # CONFIGURE AUTOMATIC UPDATES
    '271' = 'ISBL-10564-01.271' # CONFIGURE AUTOMATIC UPDATES: SCHEDULED INSTALL DAY
    '272' = 'ISBL-10564-01.272' # MANAGE PREVIEW BUILDS
    '273' = 'ISBL-10564-01.273' # TURN OFF TOAST NOTIFICATIONS ON THE LOCK SCREEN
    '274' = 'ISBL-10564-01.274' # DO NOT PRESERVE ZONE INFORMATION IN FILE ATTACHMENTS
    '275' = 'ISBL-10564-01.275' # CONFIGURE WINDOWS SPOTLIGHT ON LOCK SCREEN
    '279' = 'ISBL-10564-01.279' # ALWAYS INSTALL WITH ELEVATED PRIVILEGES
    '280' = 'ISBL-10564-01.280' # RESET ACCOUNT LOCKOUT COUNTER AFTER
    '283' = 'ISBL-10564-01.283' # PASSWORD NEVER EXPIRES
    '284' = 'ISBL-10564-01.284' # PRV_SEC_FA_SRV_VATWS, PRV_EAM_AA_SRV_IDM_SERVER_ADMINS
    '292' = 'ISBL-10564-01.292' # PRIVATE PROFILE: WINDOWS FIREWALL
    '293' = 'ISBL-10564-01.293' # THE PRIVATE PROFILE SETTINGS APPLY LOCAL CONNECTION SECURITY RULES
    '298' = 'ISBL-10564-01.298' # DISABLE WINS ENTRIES FOR IP ADDRESSES
    '300' = 'ISBL-10564-01.300' # SYSTEMS SETTINGS: OPTIONAL SUBSYSTEMS
    '307' = 'ISBL-10564-01.307' # RECOVERY CONSOLE: ALLOW AUTOMATIC ADMINISTRATIVE LOGON
    '310' = 'ISBL-10564-01.310' # BYPASS TRAVERSE CHECKING
    '317' = 'ISBL-10564-01.317' # WINDOWS FIREWALL
    '326' = 'ISBL-10564-01.326' # DHCP SERVER SERVICES
    '331' = 'ISBL-10564-01.331' # REMOTE ACCESS AUTO CONNECTION MANAGER
    '332' = 'ISBL-10564-01.332' # REMOTE ACCESS CONNECTION MANAGER MUST BE SET TO
    '336' = 'ISBL-10564-01.336' # TELEPHONY SERVICE
    '337' = 'ISBL-10564-01.337' # TELNET SERVER
    '338' = 'ISBL-10564-01.338' # WINDOWS EVENT LOG MUST BE SET TO AUTOMATIC.
    '344' = 'ISBL-10564-01.344' # WALLET SERVICE
    '351' = 'ISBL-10564-01.351' # CONNECTED USER EXPERIENCES AND TELEMETRY” (DIAGTRACK)
    '352' = 'ISBL-10564-01.352' # SMTPSVC
    '363' = 'ISBL-10564-01.363' # USB DRIVE ACCESS
    '365' = 'ISBL-10564-01.365' # BLOCK LAUNCHING WINDOWS STORE APPS WITH WINDOWS RUNTIME API ACCESS FROM HOSTED CONTENT
    '366' = 'ISBL-10564-01.366' # ALLOW TELEMETRY
    '367' = 'ISBL-10564-01.367' # CONFIGURE WINDOWS DEFENDER SMARTSCREEN
    '369' = 'ISBL-10564-01.369' # DO NOT ALLOW COM PORT REDIRECTION
    '370' = 'ISBL-10564-01.370' # DO NOT ALLOW SUPPORTED PLUG AND PLAY DEVICE REDIRECTION
    '375' = 'ISBL-10564-01.375' # ALLOW CORTANA
    '376' = 'ISBL-10564-01.376' # ALLOW CORTANA ABOVE LOCK SCREEN
    '377' = 'ISBL-10564-01.377' # ALLOW SEARCH AND CORTANA TO USE LOCATION
    '380' = 'ISBL-10564-01.380' # DISABLE ALL APPS FROM WINDOWS STORE
    '381' = 'ISBL-10564-01.381' # TURN OFF MICROSOFT DEFENDER ANTIVIRUS
    '383' = 'ISBL-10564-01.383' # JOIN MICROSOFT MAPS
    '384' = 'ISBL-10564-01.384' # SEND FILE SAMPLES WHEN FURTHER ANALYSIS IS REQUIRED
    '386' = 'ISBL-10564-01.386' # CONFIGURE WATSON EVENTS
    '387' = 'ISBL-10564-01.387' # MAXIMUM LOG SIZE FOR POWERSHELL LOGS
    '388' = 'ISBL-10564-01.388' # LOCK DOWN THE SECURITY DESCRIPTOR ON THE POWERSHELL LOGS
    '389' = 'ISBL-10564-01.389' # MAXIMUM OPERATIONAL LOG SIZE FOR POWERSHELL LOGS
    '390' = 'ISBL-10564-01.390' # LOCK DOWN THE SECURITY DESCRIPTOR ON THE POWERSHELL OPERATIONAL LOGS
    '394' = 'ISBL-10564-01.394' # TURN ON MODULE LOGGING MUST BE SET TO 'ENABLED'
    '396' = 'ISBL-10564-01.396' # BROWSER PROXY LOCKDOWN
    '440' = 'ISBL-10564-01.440' # LOGON AS A SERVICE
    '441' = 'ISBL-10564-01.441' # DISABLE MACHINE CONFIGURATION
    '442' = 'ISBL-10564-01.442' # DISABLE EXTENSIONSERVICE
}
#####################################################
#                  LOGGER
#####################################################
## Used to write Log information
Function Write-Log ($Level, $Details, $NewLine=$false) {
   $Time = get-date -F "yyyy-MM-dd HH:mm:ss,fff"

   switch ($Level) {
       0 { $LogLevel = "INFO" }
       1 { $LogLevel = "WARNING" }
       2 { $LogLevel = "ERROR" }
   }
   "$Time`t$Section`t$LogLevel`t$Details" | Out-File $LogFile -append
   If ($NewLine -eq $True) { "`n" | Out-File $LogFile -append }
}

########################################################
#           PULL SERVER NAME AND DRIVE INFO
########################################################

Function Get-ServerInfo {
   #Server Info
   Try {
       $OS = Get-WmiObject -class Win32_OperatingSystem | Select-Object -ExpandProperty Caption
       If ($OS -notlike "*2022*") {
           Write-Log 0 "Platform identified as Windows 2022"
       } else {
           Write-log 2 "Platform identified as $OS"
           Write-log 2 "This script is only supported on Windows Server 2022"
           Exit(22)
       }
   } Catch {
       Write-log 2 "Failed to get Platform identity. Error: $_.Exception"
       Exit(19)
   }
}

########################################################
#                   EXECUTEAUDITS
########################################################
Function ExecuteAudits {
   Write-Log 0 "Inventory log file located at: $LogFile"
   Write-Log 0 "Begin writing discovered product's attributes"

   #$INSTANCE_BASELINES = New-Object PSObject @{} # Step 1
   $INSTANCE_BASELINES = [Ordered]@{}
   Create-AuditpolResults
   Create-SeceditResults
   #################################################################
   #         RUN BASELINECHECKS
   #################################################################
   ForEach($BASEKEY in $BASELINE_DICT.Keys|Sort-Object){
       $BASELINE_NAME = $BASELINE_DICT[$BASEKEY]

       #EXECUTE BASELINE FUNCTIONS
       try {
           $BaselineFunction = "BaselineCheck{0}" -f $BASEKEY
           $FUNCRESULT = & $BaselineFunction -CheckName $BASELINE_NAME
           $INSTANCE_BASELINES[$BASELINE_NAME] = $FUNCRESULT
       } catch {
           Write-Log 2 "Error outputing $BASELINE_NAME"
           Write-Output "Error outputing $BASELINE_NAME"
           $_
       }
   }

   ###################################################################
   Write-Log 0 " "

   # Baseline completed create JSON file
   if ($INSTANCE_BASELINES.Count -gt 0) {
       # Create Check Details Dict
       $CHECK_DETAILS = create_check_details
       # Add product key to instances, embed in check details
       $CHECK_DETAILS[$OS_PRODUCT] = $INSTANCE_BASELINES
       $Global:COMPLIANCE_DICTIONARY["CheckDetails"] = $CHECK_DETAILS

       $CREATED = create_compliance_json
       if($CREATED -eq $true) {
           Write-Log 0 "Created: $OS_PRODUCT compliance file"
           Write-Output "Created: $Global:ComplianceFile"
       }
   }else{
       Write-Log 2 "Unable to execute compliance functions"
       Write-Output "Unable to execute compliace functions"
       Exit(33)
   }

   # End of ExecuteAudits
}

########################################################
#              CREATE CHECK DETAILS
########################################################
Function create_check_details(){
   $d = [Ordered]@{}
   $servername = $env:COMPUTERNAME
   $auditTime = get-date -f "MM/dd/yyyy HH:mm:ss"
   $os_version = [Environment]::OSVersion.Version.ToString()
   $audit_result_date = get-date -format "yyyyMMdd"

   $d["AUDIT_NAME"] =  "OS_COMPLIANCE"
   $d["OS_Version"] = $os_version
   $d["OS_FAMILY"] = "Windows Server 2022"
   $d["SOURCE_CODE"] = "DCAF"
   $d["AUDIT_RESULT_ID"] ="$($audit_result_date)0001"
   $d["AUDIT_DATE"] = $auditTime
   $d["ORM_VERSION"] = $release_package
   $d["ORM_Script_Integrity"] = "True"
   $d["SERVER_NAME"] = $servername
   return $d
}

########################################################
#              CREATE COMPLIANCE JSON
########################################################
Function create_compliance_json(){
   $success = $false
   try{
       $JSON_OUTPUT = $Global:COMPLIANCE_DICTIONARY|ConvertTo-Json -Depth 5 -ErrorAction Stop
       If(Test-Path -path $Global:ComplianceFile){Remove-Item -Path $Global:ComplianceFile -Force}
       sleep 2
       $JSON_OUTPUT| ForEach-Object{
           # Optional Code used to change default JSON spacing in Powershell
           $_ -replace "(?m)  (?<=^(?:  )*)", " "
       }| Out-File -FilePath $Global:ComplianceFile -Encoding utf8 -Force -NoClobber -ErrorAction Stop
       sleep 2
       $filecontent = Get-Content $Global:ComplianceFile
       [System.IO.File]::WriteAllLines($Global:ComplianceFile, $filecontent)

       if(Test-Path -Path $Global:ComplianceFile){
           $success = $true
       }
   } catch {
       Write-Log 2 "ERROR Creating compliance JSON"
   }
   return $success
}

########################################################
#              BASELINE HELPER FUNCTIONS
########################################################

# Dumps auditpol results to a file
Function Create-AuditpolResults() {
   #$AuditPolCommand = & "$env:SystemRoot/system32/auditpol.exe" /get /category:* /r > $Script:AuditPolResults
   $AuditPolCommand = & "$env:SystemRoot\system32\auditpol.exe" /get /category:* /r > $Script:AuditPolResults
   if(Test-Path $AuditPolResults){
       Write-Log 0 "Auditpol results file created at $AuditPolResults"
       return $true
   } else {
       Write-log 2 "Auditpol results file NOT created at $AuditPolResults"
       return $false
   }
}

#Dump secedit results to a file
Function Create-SeceditResults(){
   #$SeceditCommand = & "$env:SystemRoot/system32/secedit.exe" /export /areas USER_RIGHTS /cfg $Script:SeceditResults
   $SeceditCommand = secedit /export /areas USER_RIGHTS /cfg $Script:SeceditResults
   if(Test-Path $SeceditResults){
       Write-Log 0 "Secedit results file created at $SeceditResults"
       return $true
   } else {
       Write-log 2 "Secedit results file NOT created at $SeceditResults"
       return $false
   }
}

Function getInfoWithAuditPol(){
   param(
       [string]$PRIVGUID
   )

   $AuditPolMatch = ""
   if(Test-Path $AuditPolResults){
       $SecurityPolicyExport = Get-Content $AuditPolResults
       If($SecurityPolicyExport -match $PRIVGUID){
           Write-Debug "$PRIVGUID Found"
           $vLine = $SecurityPolicyExport | Where {$_.Contains($PRIVGUID)}
           Write-Debug "$PRIV Line:$vLine"
           $vLineSplit = $vLine.Split(",")
           $AuditPolMatch = $vLineSplit[4].Trim()
           Write-Debug "Result:$AuditPolMatch"
       }Else{
           Write-Debug "$PRIVGUID not found in results"
       }
   }Else{
       Write-Debug "Auditpol export output not found."
   }
   Return $AuditPolMatch
}

# Function TranslateSid([string]$vSID) {
#     If ($vSID -match "\*S") {
#         $vSID = $vSID.TrimStart("*")
#         Write-Debug "Translating SID: $vSID"
#         try {
#             $objSID = New-Object System.Security.Principal.SecurityIdentifier($vSID)
#             $objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
#         }
#         catch [Exception] {
#             Write-Debug "Translate failed"
#             Return $vSID
#         }
#         $vName = $objUser.Value
#         Write-Debug "Translated SID Name: $vName($vSID)"
#         Return $vName
#     }
#     else {
#         Return $vSID
#     }
# }
Function getInfoWithSeceditSingle([string]$vPriv) {
   if ($vPriv -NotLike "Se*") {
       $vPriv = TranslateURAHuman($vPriv)
   }

   $SecEditMatchList = ""
   if (Test-Path $Script:SeceditResults) {
       $SecurityPolicyExport = Get-Content $Script:SeceditResults
       foreach ($line in $SecurityPolicyExport) {
           if ($line -like "$vPriv`*") {
               Write-Debug "PRIV Line: $line"
               $vLineSplit = $line.Split("=")
               $vLineTemp = $vLineSplit[1].Trim()
               Write-Debug "SeceditKey DATA: $vLineTemp" # Changed from PRIV DATA for clarity
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-544", "Administrators"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-11", "Authenticated Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-7", "Anonymous Logon"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-546", "Guests"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-19", "Local Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-20", "Network Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-6", "Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-568", "IIS_IUSRS"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-547", "Power Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-1-0", "Everyone"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-545", "Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-551", "Backup Operators"
               # Split the line into SID entries
               $SecEditSIDS = $vLineTemp.Split(",")
               $SIDS = Normalize_SecEdit_Results $SecEditSIDS # Assuming Normalize_SecEdit_Results exists and is defined elsewhere in the actual script
               if($SIDS){
                   # Check if SIDS expected are missing
                   $Missing_Values = ''
                   foreach ($ThisCondition in $ExpectedValue.Split(',')) {
                       $ContainsCondition = $false
                       foreach ($secedit_sid in $SIDS.Split(',')) {
                           if ($secedit_sid -eq $ThisCondition) {
                               $ContainsCondition = $true
                           }
                       }
                       if ($ContainsCondition -eq $false) {
                           $Missing_Values = "Missing " + $ThisCondition + "|"
                           $ReturnCode = 1
                           $ReturnResult = ""
                           break
                       }
                   }
               } else {
                   if($ExpectedValue -eq ""){
                       $ReturnCode = 0
                       $ReturnResult = "Sids not found for $SeceditKey"
                   } else {
                       $ReturnCode = 1
                       $ReturnResult = "Sids not found for $SeceditKey"
                   }
               }
               # Check if there are additional SIDs that are not expected
               $Extra_Values = ''
               foreach ($secedit_sid in $SIDS.Split(',')) {
                   $ContainsCondition = $false
                   foreach ($ThisCondition in $ExpectedValue.Split(',')) {
                       if ($secedit_sid -eq $ThisCondition) {
                           $ContainsCondition = $true
                       }
                   }
                   if ($ContainsCondition -eq $false) {
                       $Extra_Values = "Extra " + $secedit_sid + "|"
                       break
                   }
               }
               if($Extra_Values -or $Missing_Values){
                   $Missing_Values = $Missing_Values.Trim("|")
                   $Extra_Values = $Extra_Values.Trim('|')
                   if ($Missing_Values -and $Extra_Values) {
                       $ReturnResult = "$Missing_Values; $Extra_Values"
                   } elseif ($Missing_Values) {
                       $ReturnResult = "$Missing_Values"
                   } elseif ($Extra_Values) {
                       $ReturnResult = "$Extra_Values"
                   }
                   $ReturnCode = 1
               } else {
                   $ReturnCode = 0
                   $ReturnResult = "Found $SIDS"
               }
           } else {
               $ReturnResult = 'Secedit key not found'
               $ReturnCode = 1
               $ErrorMessage = 'Secedit key ' + $SeceditKey + ' not found in export'
           }
       }
   } else {
       $ReturnResult = 'Secedit results file not found'
       $ReturnCode = 1
       $ErrorMessage = 'Secedit export output not found at ' + $Script:SeceditResults
   }
   return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
}

Function Normalize_SecEdit_Results($SecEditSIDS){
   $results = ""
   foreach ($entry in $SecEditSIDS) {
       $entry = $entry.Trim()
       if ($entry -ne "") {
           $results = "$results,$entry"
       }
   }
   If ($results.Length -gt 0) {
       $results = $results.Trim(",")
   }
   return $results
}

# Function to handle Registry compliance
function Test-Registry {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )
   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $RegistryPath = $Requirement.Path
   $ValueName = $Requirement.ValueName
   $ExpectedValue = $Requirement.ExpectedValue
   $MustExist = $Requirement.MustExist
   $ComparisonType = $Requirement.Comparator

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   Write-Debug "Testing Registry for: $($Requirement['CIS Name'])"
   if (Test-Path -Path $RegistryPath) {
       $RegProperty = Get-ItemProperty -Path $RegistryPath -Name $ValueName -ErrorAction SilentlyContinue

       if ($null -ne $RegProperty -and $RegProperty.PSObject.Properties.Name -contains $ValueName) {
           if ($RegProperty.$ValueName -is [array]) {
               $CurrentValue = ($RegProperty.$ValueName | ForEach-Object { $_.ToString() }) -join ", "
           } else {
               $CurrentValue = $RegProperty.$ValueName.ToString()
           }

           if ($ComparisonType -eq "=" -and $CurrentValue -eq $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Expected value matched: $ExpectedValue"
           } elseif ($ComparisonType -eq ">" -and $CurrentValue -gt $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is greater than: $CurrentValue > $ExpectedValue"
           } elseif ($ComparisonType -eq "<" -and $CurrentValue -lt $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is less than: $CurrentValue < $ExpectedValue"
           }elseif ($ComparisonType -eq ">=" -and $CurrentValue -ge $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is greater than or equal: $CurrentValue >= $ExpectedValue"
           } elseif ($ComparisonType -eq "<=" -and $CurrentValue -le $ExpectedValue) {
               $ReturnCode = 0
               $ReturnResult = "Value is less than or equal: $CurrentValue <= $ExpectedValue"
           } elseif ($ComparisonType -eq "Contains" -and $CurrentValue -like "*$ExpectedValue*") {
               $ReturnCode = 0
               $ReturnResult = "Value contains expected: $CurrentValue contains $ExpectedValue"
           } else {
               $ReturnCode = 1
               $ReturnResult = "Value does not meet the expected condition. Found: $CurrentValue, Expected: $ComparisonType $ExpectedValue"
               $ErrorMessage = "Comparison failed for $ValueName with $ComparisonType"
           }
       } else {
           if(-not $MustExist){
               $ReturnCode = 0
               $ReturnResult = "Registry not set/found"
           }else {
               $ReturnCode = 1
               $ReturnResult = "Registry value '$ValueName' not found"
               $ErrorMessage = "Registry value '$ValueName' does not exist in registry path '$RegistryPath'"
           }
       }
   } else {
       $ReturnCode = 1
       $ReturnResult = "Registry not Found"
       $ErrorMessage = "Registry Path '$RegistryPath' does not exist."
   }

   #Compliance Dictionary
   $CheckResults = @{}
   $CheckResults["sExpectedValue"] = $Expected
   $CheckResults["sReturnValue"] = $ReturnResult
   $CheckResults["bIsCompliant"] = $ReturnCode
   $CheckResults["sErrorMessage"] = $ErrorMessage
   return $CheckResults
}

# Function to handle Secedit compliance
Function Test-Secedit {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )

   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $SeceditKey = $Requirement.SeceditKey
   $ExpectedValue = $Requirement.ExpectedValue

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   if (Test-Path $Script:SeceditResults) {
       $SecurityPolicyExport = Get-Content $Script:SeceditResults
       # Ensure file is not empty
       if ($SecurityPolicyExport.Count -eq 0) {
           $ReturnResult = 'Secedit results file is empty'
           $ReturnCode = 1
           $ErrorMessage = 'Secedit export output is empty at ' + $Script:SeceditResults
           return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
       }
       foreach ($line in $SecurityPolicyExport) {
           if ($line -like "$SeceditKey`*") {
               Write-Debug "SeceditKey Line: $line"
               $vLineSplit = $line.Split("=")
               $vLineTemp = $vLineSplit[1].Trim()
               Write-Debug "SeceditKey DATA: $vLineTemp"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-544", "Administrators"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-11", "Authenticated Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-7", "Anonymous Logon"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-546", "Guests"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-19", "Local Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-20", "Network Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-6", "Service"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-568", "IIS_IUSRS"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-547", "Power Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-1-0", "Everyone"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-545", "Users"
               $vLineTemp = $vLineTemp -replace "\*S-1-5-32-551", "Backup Operators"
               # Split the line into SID entries
               $SecEditSIDS = $vLineTemp.Split(",")
               $SIDS = Normalize_SecEdit_Results $SecEditSIDS # Assuming Normalize_SecEdit_Results exists and is defined elsewhere in the actual script
               if($SIDS){
                   # Check if SIDS expected are missing
                   $Missing_Values = ''
                   foreach ($ThisCondition in $ExpectedValue.Split(',')) {
                       $ContainsCondition = $false
                       foreach ($secedit_sid in $SIDS.Split(',')) {
                           if ($secedit_sid -eq $ThisCondition) {
                               $ContainsCondition = $true
                           }
                       }
                       if ($ContainsCondition -eq $false) {
                           $Missing_Values = "Missing " + $ThisCondition + "|"
                           $ReturnCode = 1
                           $ReturnResult = ""
                           break
                       }
                   }
               } else {
                   if($ExpectedValue -eq ""){
                       $ReturnCode = 0
                       $ReturnResult = "Sids not found for $SeceditKey"
                   } else {
                       $ReturnCode = 1
                       $ReturnResult = "Sids not found for $SeceditKey"
                   }
               }
               # Check if there are additional SIDs that are not expected
               $Extra_Values = ''
               foreach ($secedit_sid in $SIDS.Split(',')) {
                   $ContainsCondition = $false
                   foreach ($ThisCondition in $ExpectedValue.Split(',')) {
                       if ($secedit_sid -eq $ThisCondition) {
                           $ContainsCondition = $true
                       }
                   }
                   if ($ContainsCondition -eq $false) {
                       $Extra_Values = "Extra " + $secedit_sid + "|"
                       break
                   }
               }
               if($Extra_Values -or $Missing_Values){
                   $Missing_Values = $Missing_Values.Trim("|")
                   $Extra_Values = $Extra_Values.Trim('|')
                   if ($Missing_Values -and $Extra_Values) {
                       $ReturnResult = "$Missing_Values; $Extra_Values"
                   } elseif ($Missing_Values) {
                       $ReturnResult = "$Missing_Values"
                   } elseif ($Extra_Values) {
                       $ReturnResult = "$Extra_Values"
                   }
                   $ReturnCode = 1
               } else {
                   $ReturnCode = 0
                   $ReturnResult = "Found $SIDS"
               }
           } else {
               $ReturnResult = 'Secedit key not found'
               $ReturnCode = 1
               $ErrorMessage = 'Secedit key ' + $SeceditKey + ' not found in export'
           }
       }
   } else {
       $ReturnResult = 'Secedit results file not found'
       $ReturnCode = 1
       $ErrorMessage = 'Secedit export output not found at ' + $Script:SeceditResults
   }
   return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
}

Function Normalize_SecEdit_Results($SecEditSIDS){
   $results = ""
   foreach ($entry in $SecEditSIDS) {
       $entry = $entry.Trim()
       if ($entry -ne "") {
           $results = "$results,$entry"
       }
   }
   If ($results.Length -gt 0) {
       $results = $results.Trim(",")
   }
   return $results
}

# Function to handle Service compliance
function Test-Service {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )

   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $ServiceName = $Requirement.ServiceName
   $ExpectedValue = $Requirement.ExpectedValue

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   # ExpectedValue can be "Disabled", "Running,Automatic", etc.
   $ExpectedParts = $ExpectedValue.Split(',') | ForEach-Object { $_.Trim() }
   $ExpectedStatus = $ExpectedParts[0]
   $ExpectedStartType = if ($ExpectedParts.Count -gt 1) { $ExpectedParts[1] } else { $null }

   $Service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
   if ($Service) {
       $CurrentStatus = $Service.Status.ToString()
       $CurrentStartType = $Service.StartType.ToString()
       $CurrentValue = $CurrentStatus
       if ($ExpectedStartType) { $CurrentValue += ",$CurrentStartType" }

       $IsStatusCompliant = ($CurrentStatus -eq $ExpectedStatus)
       $IsStartTypeCompliant = if ($ExpectedStartType) { $CurrentStartType -eq $ExpectedStartType } else { $true }

       if ($IsStatusCompliant -and $IsStartTypeCompliant) {
           $ReturnCode = 0
           $ReturnResult = "$ServiceName found with $ExpectedValue"
       } else {
           $ReturnCode = 1
           $ReturnResult = "$ServiceName Status: $CurrentStatus; StartType: $CurrentStartType"
           $ErrorMessage = "$ServiceName not $ExpectedValue"
       }
   } else {
       $ReturnCode = 1
       $ReturnResult = "Service Not Found"
       $ErrorMessage = "Service $ServiceName not found"
   }

   #Compliance Dictionary
   $CheckResults = @{}
   $CheckResults["sExpectedValue"] = $Expected
   $CheckResults["sReturnValue"] = $ReturnResult
   $CheckResults["bIsCompliant"] = $ReturnCode
   $CheckResults["sErrorMessage"] = $ErrorMessage
   return $CheckResults
}

# Function to handle AuditPol compliance
function Test-AuditPol {
   param (
       [Parameter(Mandatory)]
       [hashtable]$Requirement
   )

   $CISName = $Requirement."CIS Name" # Friendly Check Name
   $AuditCategory = $Requirement.AuditCategory
   $CategoryGUID = $Requirement.CategoryGUID
   $ExpectedValue = $Requirement.ExpectedValue
   $ComparisonType = $Requirement.ComparisonType

   $Expected = $CISName
   $ReturnResult = ''
   $ReturnCode = 1
   $ErrorMessage = ''

   if(Test-Path $Script:AuditPolResults){
       $result = getInfoWithAuditPol -PRIVGUID $CategoryGUID
       if($result){
           if($ComparisonType -eq "Match" -and ($result -like "*$ExpectedValue*")){
               $ReturnCode = 0
               $ReturnResult = "Found $result"
           } elseif ($ComparisonType -eq "Equal" -and ($result -eq $ExpectedValue)){
               $ReturnCode = 0
               $ReturnResult = "Found $result"
           } else {
               $ReturnCode = 1
               $ReturnResult = "Found $result"
               $ErrorMessage = "Expected Value; $ExpectedValue; Found $result"
           }
       } else {
           # This condition is now more likely to be hit if the GUID is genuinely not found or the file is empty/malformed
           $ReturnCode = 1
           $ReturnResult = "$CategoryGUID not found in auditpol results or results file issue"
           $ErrorMessage = "Auditpol results for $CategoryGUID not found or could not be parsed."
       }
   }Else{
       $ReturnCode = 1
       $ReturnResult = "Auditpol results file not found"
       $ErrorMessage = "Auditpol export output not found at " + $Script:AuditPolResults
   }

   #Compliance Dictionary
   $CheckResults = @{}
   $CheckResults["sExpectedValue"] = $Expected
   $CheckResults["sReturnValue"] = $ReturnResult
   $CheckResults["bIsCompliant"] = $ReturnCode
   $CheckResults["sErrorMessage"] = $ErrorMessage
   return $CheckResults
}

########################################################
# BEGIN BASELINE CHECKS
########################################################
# Existing BaselineCheck009 (from newbasescript.txt)
Function BaseLineCheck009([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.009"
       "CIS Name" = "ALLOW ADMINISTRATOR ACCOUNT LOCKOUT"
       "CheckType" = "Registry"
       "Path" = "HKLM:\Software\Policies\Microsoft\Windows\Safer\CodeIdentifiers"
       "ValueName" = "AllowAdminAccountLockout"
       "ExpectedValue" = "1"
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck043([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.043"
       "CIS Name" = "REPLACE A PROCESS LEVEL TOKEN"
       "CheckType" = "Secedit"
       "SeceditKey" = "SeAssignPrimaryTokenPrivilege" # Common Secedit key for this setting
       "ExpectedValue" = "LOCAL SERVICE,NETWORK SERVICE"
   }
   $ComplianceValues = Test-Secedit -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck055([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.055"
       "CIS Name" = "DOMAIN MEMBER: DIGITALLY ENCRYPT SECURE CHANNEL DATA (WHEN POSSIBLE)"
       "CheckType" = "Registry"
       "Path" = "HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters"
       "ValueName" = "RequireSignOrSeal"
       "ExpectedValue" = "1" # Enabled
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck064([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.064"
       "CIS Name" = "CONFIGURE INTERACTIVE LOGON: MESSAGE TITLE FOR USERS ATTEMPTING TO LOG ON"
       "CheckType" = "Registry"
       "Path" = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System"
       "ValueName" = "LegalNoticeCaption"
       "ExpectedValue" = "Your Custom Title Here" # Placeholder, replace with actual expected value
       "MustExist" = $true
       "Comparator" = "Contains" # Or "=" if exact match is needed
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck065([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.065"
       "CIS Name" = "INTERACTIVE LOGON: PROMPT USER TO CHANGE PASSWORD BEFORE EXPIRATION"
       "CheckType" = "Registry"
       "Path" = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
       "ValueName" = "PasswordExpiryWarningDays"
       "ExpectedValue" = "14" # Common default, adjust as needed
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck066([string]$CheckName) {
   $Requirements = @{
       "ISBL" = "ISBL-10564-01.066"
       "CIS Name" = "INTERACTIVE LOGON: SMART CARD REMOVAL BEHAVIOR"
       "CheckType" = "Registry"
       "Path" = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
       "ValueName" = "ScRemoveOption"
       "ExpectedValue" = "1" # 1 for Lock Workstation, 2 for Force Logoff, 3 for Disconnect Remote Desktop
       "MustExist" = $true
       "Comparator" = "="
   }
   $ComplianceValues = Test-Registry -Requirement $Requirements
   if(-not $ComplianceValues){
       $ReturnResult = 'Error Returning Value'
       $ReturnCode = 1
       $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
       return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
   }
   return $ComplianceValues
}

Function BaseLineCheck073([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.073"
        "CIS Name"      = "MICROSOFT NETWORK SERVER: DISCONNECT CLIENTS WHEN LOGON HOURS EXPIRE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters"
        "ValueName"     = "AutoDisconnect"
        "ExpectedValue" = "1" # Typically 1 for Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck074([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.074"
        "CIS Name"      = "MICROSOFT NETWORK SERVER: SERVER SPN TARGET NAME VALIDATION LEVEL"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters"
        "ValueName"     = "SmbServerNameHardeningLevel"
        "ExpectedValue" = "1" # 1 for accept if provided by client, 2 for require
        "MustExist"     = $true
        "Comparator"    = ">=" # Or "=" depending on exact requirement
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck079([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.079"
        "CIS Name"      = "CONFIGURE NETWORK ACCESS: NAMED PIPES THAT CAN BE ACCESSED ANONYMOUSLY"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\LanmanServer\Parameters"
        "ValueName"     = "NullSessionPipes"
        "ExpectedValue" = "" # Expected to be empty or contain only secure pipes
        "MustExist"     = $true
        "Comparator"    = "=" # Or 'NotContains' if specific pipes should not be there
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck087([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.087"
        "CIS Name"      = "NETWORK SECURITY: ALLOW PKU2U AUTHENTICATION REQUESTS TO THIS COMPUTER TO USE ONLINE IDENTITIES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters"
        "ValueName"     = "AllowPku2uLogon"
        "ExpectedValue" = "0" # 0 for Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck089([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.089"
        "CIS Name"      = "NETWORK SECURITY: FORCE LOGOFF WHEN LOGON HOURS EXPIRE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters"
        "ValueName"     = "AutoDisconnect" # This is the same as 073, but the CIS name indicates a slightly different angle. Ensure the value aligns.
        "ExpectedValue" = "1" # Typically 1 for Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck094([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.094"
        "CIS Name"      = "NETWORK SECURITY: RESTRICT NTLM: AUDIT INCOMING NTLM TRAFFIC"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0"
        "ValueName"     = "RestrictSendingNTLMTraffic" # Or a specific audit key
        "ExpectedValue" = "2" # Audit all (2), or disable (0)
        "MustExist"     = $true
        "Comparator"    = ">=" # Could be 2 or higher if other audit options exist
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck095([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.095"
        "CIS Name"      = "NETWORK SECURITY: RESTRICT NTLM: OUTGOING NTLM TRAFFIC TO REMOTE SERVERS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0"
        "ValueName"     = "RestrictReceivingNTLMTraffic" # Or a specific audit key for outgoing
        "ExpectedValue" = "2" # Audit all (2), or disable (0)
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck099([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.099"
        "CIS Name"      = "WINDOWS FIREWALL: DOMAIN: FIREWALL STATE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile"
        "ValueName"     = "EnableFirewall"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck100([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.100"
        "CIS Name"      = "WINDOWS FIREWALL: DOMAIN: INBOUND CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile"
        "ValueName"     = "DefaultInboundAction"
        "ExpectedValue" = "1" # Block
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck102([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.102"
        "CIS Name"      = "WINDOWS FIREWALL: DOMAIN: LOGGING: NAME"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging"
        "ValueName"     = "LogFile"
        "ExpectedValue" = "%systemroot%\system32\LogFiles\Firewall\pfirewall.log"
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck106([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.106"
        "CIS Name"      = "WINDOWS FIREWALL: PRIVATE: FIREWALL STATE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PrivateProfile"
        "ValueName"     = "EnableFirewall"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck109([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.109"
        "CIS Name"      = "WINDOWS FIREWALL: PRIVATE: LOGGING: NAME"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging"
        "ValueName"     = "LogFile"
        "ExpectedValue" = "%systemroot%\system32\LogFiles\Firewall\pfirewall.log"
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck112([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.112"
        "CIS Name"      = "WINDOWS FIREWALL: PRIVATE: LOGGING: LOG SUCCESSFUL CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging"
        "ValueName"     = "LogSuccessfulConnections"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck114([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.114"
        "CIS Name"      = "WINDOWS FIREWALL: PUBLIC: INBOUND CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile"
        "ValueName"     = "DefaultInboundAction"
        "ExpectedValue" = "1" # Block
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck118([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.118"
        "CIS Name"      = "WINDOWS FIREWALL: PUBLIC: LOGGING: NAME"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging"
        "ValueName"     = "LogFile"
        "ExpectedValue" = "%systemroot%\system32\LogFiles\Firewall\pfirewall.log"
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck128([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.128"
        "CIS Name"      = "AUDIT ACCOUNT LOCKOUT"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Logon/Logoff"
        "CategoryGUID"  = "{0CCE9219-69AE-11D9-BEC1-000100000000}" # GUID for Account Lockout
        "ExpectedValue" = "Success and Failure"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck129([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.129"
        "CIS Name"      = "AUDIT GROUP MEMBERSHIP"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Account Management"
        "CategoryGUID"  = "{0CCE9210-69AE-11D9-BEC1-000100000000}" # GUID for Security Group Management
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck130([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.130"
        "CIS Name"      = "AUDIT LOGOFF"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Logon/Logoff"
        "CategoryGUID"  = "{0CCE9218-69AE-11D9-BEC1-000100000000}" # GUID for Logoff
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck127([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.127"
        "CIS Name"      = "AUDIT PROCESS CREATION"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "Detailed Tracking"
        "CategoryGUID"  = "{0CCE921B-69AE-11D9-BEC1-000100000000}" # GUID for Process Creation
        "ExpectedValue" = "Success"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck145([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.145"
        "CIS Name"      = "AUDIT OTHER SYSTEM EVENTS"
        "CheckType"     = "AuditPol"
        "AuditCategory" = "System"
        "CategoryGUID"  = "{0CCE9214-69AE-11D9-BEC1-000100000000}" # GUID for Other System Events
        "ExpectedValue" = "Success and Failure"
        "ComparisonType"= "Match"
    }
    $ComplianceValues = Test-AuditPol -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck152([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.152"
        "CIS Name"      = "APPLY UAC RESTRICTIONS TO LOCAL ACCOUNTS ON NETWORK LOGONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
        "ValueName"     = "LocalAccountTokenFilterPolicy"
        "ExpectedValue" = "0" # Enabled (0 disables filtering, which applies restrictions)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck153([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.153"
        "CIS Name"      = "CONFIGURE RPC PACKET LEVEL PRIVACY SETTING FOR INCOMING CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\RPC"
        "ValueName"     = "EnableAuthEpResolution" # Or a specific privacy setting
        "ExpectedValue" = "1" # Enabled (ensure privacy)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck156([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.156"
        "CIS Name"      = "ENABLE CERTIFICATE PADDING"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\SystemCertificates\TrustedPeople" # Example path, exact path depends on context
        "ValueName"     = "EnableCertPadding" # Placeholder, actual reg key might vary
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck158([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.158"
        "CIS Name"      = "NETBT NODETYPE CONFIGURATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\System\CurrentControlSet\Services\NetBT\Parameters"
        "ValueName"     = "NodeType"
        "ExpectedValue" = "8" # 8 (P-node) or 4 (M-node) for security. Avoid 1 (B-node) or 2 (H-node)
        "MustExist"     = $true
        "Comparator"    = ">=" # Or specify exact value
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck159([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.159"
        "CIS Name"      = "WDIGEST AUTHENTICATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest"
        "ValueName"     = "UseLogonCredential"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck160([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.160"
        "CIS Name"      = "MSS: (AUTOADMINLOGON) ENABLE AUTOMATIC LOGON"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
        "ValueName"     = "AutoAdminLogon"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck161([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.161"
        "CIS Name"      = "MSS: (DISABLEIPSOURCEROUTING IPV6) IP SOURCE ROUTING PROTECTION LEVEL"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters"
        "ValueName"     = "DisableIPSourceRouting"
        "ExpectedValue" = "2" # Strongest protection
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck162([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.162"
        "CIS Name"      = "MSS: (DISABLEIPSOURCEROUTING) IP SOURCE ROUTING PROTECTION LEVEL"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"
        "ValueName"     = "DisableIPSourceRouting"
        "ExpectedValue" = "2" # Strongest protection
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck164([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.164"
        "CIS Name"      = "MSS: (NONAMERELEASEONDEMAND) ALLOW THE COMPUTER TO IGNORE NETBIOS NAME RELEASE REQUESTS EXCEPT FROM WINS SERVERS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\NetBT\Parameters"
        "ValueName"     = "NoNameReleaseOnDemand"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck165([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.165"
        "CIS Name"      = "MSS: (SAFEDLLSEARCHMODE) ENABLE SAFE DLL SEARCH MODE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager"
        "ValueName"     = "SafeDllSearchMode"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck166([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.166"
        "CIS Name"      = "MSS: (SCREENSAVERGRACEPERIOD) THE TIME IN SECONDS BEFORE THE SCREEN SAVER GRACE PERIOD EXPIRES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
        "ValueName"     = "ScreenSaverGracePeriod"
        "ExpectedValue" = "5" # Or 0 for no grace period
        "MustExist"     = $true
        "Comparator"    = "<=" # Less than or equal to 5 seconds
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck167([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.167"
        "CIS Name"      = "CONFIGURE NETBIOS SETTINGS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces" # Need to iterate through interfaces
        "ValueName"     = "NetbiosOptions"
        "ExpectedValue" = "2" # Disable NetBIOS over TCP/IP
        "MustExist"     = $false # Can be 0 if not configured
        "Comparator"    = "="
    }
    # This check is more complex as it needs to iterate through network interfaces.
    # For now, it will check the general parameter if available.
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck169([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.169"
        "CIS Name"      = "CONFIGURE DNS OVER HTTPS (DOH) NAME RESOLUTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters"
        "ValueName"     = "EnableAutoDoh"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck174([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.174"
        "CIS Name"      = "HARDENED UNC PATHS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\NetworkProvider\HardenedUNCPaths"
        "ValueName"     = "" # This key itself indicates presence of hardened paths
        "ExpectedValue" = "Exists" # Check for existence, not a specific value
        "MustExist"     = $true
        "Comparator"    = "Contains" # A value indicating entries are present, or simply check for existence of the key
    }
    # This check is conceptual and might need more specific logic to check entries.
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck175([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.175"
        "CIS Name"      = "MINIMIZE THE NUMBER OF SIMULTANEOUS CONNECTIONS TO THE INTERNET OR A WINDOWS DOMAIN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings"
        "ValueName"     = "MaxConnectionsPer1_0Server" # Example, actual regkey varies by policy
        "ExpectedValue" = "4" # Standard limit
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck176([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.176"
        "CIS Name"      = "CONFIGURE REDIRECTION GUARD"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"
        "ValueName"     = "EnableSecuritySignature" # Example, related to SMB signing
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck177([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.177"
        "CIS Name"      = "CONFIGURE RPC CONNECTION SETTINGS: PROTOCOL TO USE FOR OUTGOING RPC CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\RPC"
        "ValueName"     = "ClientProtocols"
        "ExpectedValue" = "ncacn_ip_tcp" # Example for TCP/IP
        "MustExist"     = $true
        "Comparator"    = "Contains"
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck178([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.178"
        "CIS Name"      = "CONFIGURE RPC CONNECTION SETTINGS: USE AUTHENTICATION FOR OUTGOING RPC CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\RPC"
        "ValueName"     = "ClientAuthentication" # Example for authentication setting
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck179([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.179"
        "CIS Name"      = "CONFIGURE RPC LISTENER SETTINGS: PROTOCOLS TO ALLOW FOR INCOMING RPC CONNECTIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\RPC"
        "ValueName"     = "ServerProtocols"
        "ExpectedValue" = "ncacn_ip_tcp" # Example for TCP/IP
        "MustExist"     = $true
        "Comparator"    = "Contains"
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck180([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.180"
        "CIS Name"      = "CONFIGURE RPC LISTENER SETTINGS: AUTHENTICATION PROTOCOL TO USE FOR INCOMING RPC CONNECTIONS:"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\RPC"
        "ValueName"     = "ServerAuthentication" # Example for authentication setting
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck181([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.181"
        "CIS Name"      = "CONFIGURE RPC OVER TCP PORT"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\RPC"
        "ValueName"     = "RPCoverTCPPort"
        "ExpectedValue" = "135" # Default RPC port
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck182([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.182"
        "CIS Name"      = "LIMITS PRINT DRIVER INSTALLATION TO ADMINISTRATORS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint"
        "ValueName"     = "RestrictDriverInstallationToAdministrators"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck183([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.183"
        "CIS Name"      = "MANAGE PROCESSING OF QUEUE-SPECIFIC FILES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Printers"
        "ValueName"     = "ForceSpoolerIsolation" # Example, check for related settings
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck184([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.184"
        "CIS Name"      = "POINT AND PRINT RESTRICTIONS: WHEN INSTALLING DRIVERS FOR A NEW CONNECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint"
        "ValueName"     = "InForest" # Or a specific setting for installation
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck185([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.185"
        "CIS Name"      = "POINT AND PRINT RESTRICTIONS: WHEN UPDATING DRIVERS FOR AN EXISTING CONNECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint"
        "ValueName"     = "UpdatePromptBehavior"
        "ExpectedValue" = "0" # Do not show warning or elevation prompt
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck187([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.187"
        "CIS Name"      = "ENCRYPTION ORACLE REMEDIATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\Policy"
        "ValueName"     = "AllowEncryptionOracle"
        "ExpectedValue" = "0" # Force Updated Clients
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck188([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.188"
        "CIS Name"      = "REMOTE HOST ALLOWS DELEGATION OF NON-EXPORTABLE CREDENTIALS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation"
        "ValueName"     = "AllowEnryptedCredentials" # Example, actual reg key might vary
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck189([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.189"
        "CIS Name"      = "PREVENT DEVICE METADATA RETRIEVAL FROM THE INTERNET"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeviceInstall\Settings"
        "ValueName"     = "DisableMetadataRetrieval"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck190([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.190"
        "CIS Name"      = "BOOT-START DRIVER INITIALIZATION POLICY"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\BootDriverPolicy"
        "ValueName"     = "Policy"
        "ExpectedValue" = "0" # Default (No policy or similar to disable certain policies)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck193([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.193"
        "CIS Name"      = "CONFIGURE SECURITY POLICY PROCESSING: DO NOT APPLY DURING PERIODIC BACKGROUND PROCESSING"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Group Policy\{3CD11F4A-4836-4B80-97BE-B521639A5D19}" # GUID for security policy
        "ValueName"     = "NoGPOPeriodicBackgroundProcessing"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck194([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.194"
        "CIS Name"      = "CONFIGURE SECURITY POLICY PROCESSING: PROCESS EVEN IF THE GROUP POLICY OBJECTS HAVE NOT CHANGED"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Group Policy\{3CD11F4A-4836-4B80-97BE-B521639A5D19}" # GUID for security policy
        "ValueName"     = "ForceRefresh"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck197([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.197"
        "CIS Name"      = "TURN OFF DOWNLOADING OF PRINT DRIVERS OVER HTTP"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint"
        "ValueName"     = "RestrictDriverInstallationToAdministrators" # Indirectly disables HTTP download
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck199([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.199"
        "CIS Name"      = "ENUMERATION POLICY FOR EXTERNAL DEVICES INCOMPATIBLE WITH KERNEL DMA PROTECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeviceInstall\Restrictions"
        "ValueName"     = "DmaProtection" # Example, actual reg key might vary
        "ExpectedValue" = "1" # Enabled (enforce protection)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck200([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.200"
        "CIS Name"      = "ALLOW CUSTOM SSPS AND APS TO BE LOADED INTO LSASS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa"
        "ValueName"     = "LsaCurtain" # Example, actual reg key might vary for LSASS protection
        "ExpectedValue" = "0" # Disabled (to prevent loading custom SSPS/APS)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck201([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.201"
        "CIS Name"      = "BLOCK USER FROM SHOWING ACCOUNT DETAILS ON SIGN-IN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "BlockUserAuthDetails"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck202([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.202"
        "CIS Name"      = "DO NOT DISPLAY NETWORK SELECTION UI"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "DontDisplayNetworkSelectionUI"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck206([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.206"
        "CIS Name"      = "TURN OFF PICTURE PASSWORD SIGN-IN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Credentials\SmartCard"
        "ValueName"     = "DisablePicturePassword"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck208([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.208"
        "CIS Name"      = "REQUIRE A PASSWORD WHEN A COMPUTER WAKES (ON BATTERY)"
        "CheckType"     = "Registry"
        "Path"          = "HKCU:\Control Panel\PowerCfg\PowerSettings\CurrentControlSet\Control\Power\PowerSettings\00123456-7890-ABCD-EF01-23456789ABCD\00123456-7890-ABCD-EF01-23456789ABCD" # GUID for password on wake
        "ValueName"     = "ACSettingIndex" # Or DCSettingIndex for battery
        "ExpectedValue" = "1" # Requires password
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck209([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.209"
        "CIS Name"      = "REQUIRE A PASSWORD WHEN A COMPUTER WAKES (PLUGGED IN)"
        "CheckType"     = "Registry"
        "Path"          = "HKCU:\Control Panel\PowerCfg\PowerSettings\CurrentControlSet\Control\Power\PowerSettings\00123456-7890-ABCD-EF01-23456789ABCD\00123456-7890-ABCD-EF01-23456789ABCD" # GUID for password on wake
        "ValueName"     = "DCSettingIndex" # Or ACSettingIndex for plugged in
        "ExpectedValue" = "1" # Requires password
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck213([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.213"
        "CIS Name"      = "ENABLE WINDOWS NTP SERVER"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"
        "ValueName"     = "Enabled"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck214([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.214"
        "CIS Name"      = "ALLOW MICROSOFT ACCOUNTS TO BE OPTIONAL"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
        "ValueName"     = "NoConnectedUserExperiences" # This enables/disables connected experiences
        "ExpectedValue" = "1" # Set to 1 to *disallow* Microsoft accounts
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck215([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.215"
        "CIS Name"      = "DISALLOW AUTOPLAY FOR NON-VOLUME DEVICES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer"
        "ValueName"     = "NoDriveTypeAutoRun"
        "ExpectedValue" = "255" # All drives disabled (0xFF)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck216([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.216"
        "CIS Name"      = "SET THE DEFAULT BEHAVIOR FOR AUTORUN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer"
        "ValueName"     = "NoAutorun"
        "ExpectedValue" = "1" # Enabled (disables autorun)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck219([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.219"
        "CIS Name"      = "TURN OFF CLOUD CONSUMER ACCOUNT STATE CONTENT"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent"
        "ValueName"     = "DisableCloudSync" # Example, actual reg key might vary for cloud content
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck220([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.220"
        "CIS Name"      = "TURN OFF MICROSOFT CONSUMER EXPERIENCES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent"
        "ValueName"     = "DisableConsumerFeatures"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck223([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.223"
        "CIS Name"      = "ENUMERATE ADMINISTRATOR ACCOUNTS ON ELEVATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
        "ValueName"     = "FilterAdministratorToken"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck224([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.224"
        "CIS Name"      = "ALLOW DIAGNOSTIC DATA"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "AllowTelemetry"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck225([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.225"
        "CIS Name"      = "DISABLE ONESETTINGS DOWNLOADS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\SettingSync"
        "ValueName"     = "DisableSync" # Example, related to sync settings
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck226([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.226"
        "CIS Name"      = "DO NOT SHOW FEEDBACK NOTIFICATIONS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "DoNotShowFeedbackNotifications"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck227([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.227"
        "CIS Name"      = "ENABLE ONESETTINGS AUDITING"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\SettingSync"
        "ValueName"     = "EnableSyncAuditing" # Example, might vary for auditing
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck228([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.228"
        "CIS Name"      = "LIMIT DIAGNOSTIC LOG COLLECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "LimitDiagnosticLogCollection"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck229([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.229"
        "CIS Name"      = "LIMIT DUMP COLLECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "LimitDumpCollection"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck230([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.230"
        "CIS Name"      = "TOGGLE USER CONTROL OVER INSIDER BUILDS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PreviewBuilds"
        "ValueName"     = "AllowBuildPreview" # Example, actual reg key might vary
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck231([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.231"
        "CIS Name"      = "ENABLE APP INSTALLER"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppInstaller"
        "ValueName"     = "EnableAppInstaller"
        "ExpectedValue" = "0" # Disabled (to prevent unauthorized app installs)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck232([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.232"
        "CIS Name"      = "ENABLE APP INSTALLER EXPERIMENTAL FEATURES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppInstaller"
        "ValueName"     = "EnableExperimentalFeatures"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck233([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.233"
        "CIS Name"      = "ENABLE APP INSTALLER HASH OVERRIDE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppInstaller"
        "ValueName"     = "EnableHashOverride"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck234([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.234"
        "CIS Name"      = "ENABLE APP INSTALLER MS-APPINSTALLER PROTOCOL"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppInstaller"
        "ValueName"     = "EnableMsAppInstallerProtocol"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck238([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.238"
        "CIS Name"      = "SECURITY: SPECIFY THE MAXIMUM LOG FILE SIZE (KB)"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\Security"
        "ValueName"     = "MaxSize"
        "ExpectedValue" = "196608" # Example: 192MB
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck240([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.240"
        "CIS Name"      = "SETUP: SPECIFY THE MAXIMUM LOG FILE SIZE (KB)"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\Setup"
        "ValueName"     = "MaxSize"
        "ExpectedValue" = "196608" # Example: 192MB
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck241([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.241"
        "CIS Name"      = "SYSTEM: CONTROL EVENT LOG BEHAVIOR WHEN THE LOG FILE REACHES ITS MAXIMUM SIZE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\System"
        "ValueName"     = "Retention"
        "ExpectedValue" = "0" # Overwrite events as needed
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck242([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.242"
        "CIS Name"      = "SYSTEM: SPECIFY THE MAXIMUM LOG FILE SIZE (KB)"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\System"
        "ValueName"     = "MaxSize"
        "ExpectedValue" = "196608" # Example: 192MB
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck246([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.246"
        "CIS Name"      = "BLOCK ALL CONSUMER MICROSOFT ACCOUNT USER AUTHENTICATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
        "ValueName"     = "DisableOnlineAccountSignIn"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck247([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.247"
        "CIS Name"      = "CONFIGURE LOCAL SETTING OVERRIDE FOR REPORTING TO MICROSOFT MAPS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"
        "ValueName"     = "DisableLocalAdminSettings"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck248([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.248"
        "CIS Name"      = "PREVENT THE USAGE OF ONEDRIVE FOR FILE STORAGE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\OneDrive"
        "ValueName"     = "DisableFileSyncNGSC"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck249([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.249"
        "CIS Name"      = "DO NOT ALLOW PASSWORDS TO BE SAVED"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "DisablePasswordCaching"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck250([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.250"
        "CIS Name"      = "DO NOT ALLOW DRIVE REDIRECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fDisableCdm"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck251([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.251"
        "CIS Name"      = "ALWAYS PROMPT FOR PASSWORD UPON CONNECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fPromptForPassword"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck252([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.252"
        "CIS Name"      = "REQUIRE SECURE RPC COMMUNICATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\RPC"
        "ValueName"     = "ServerAuthLevel" # Example, related to RPC security
        "ExpectedValue" = "6" # Require Packet Privacy (RPC_C_AUTHN_LEVEL_PKT_PRIVACY)
        "MustExist"     = $true
        "Comparator"    = ">=" # At least privacy level
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck255([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.255"
        "CIS Name"      = "DO NOT USE TEMPORARY FOLDERS PER SESSION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        "ValueName"     = "fEnableTempFoldersPerSession"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck258([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.258"
        "CIS Name"      = "ALLOW WINDOWS INK WORKSPACE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsInkWorkspace"
        "ValueName"     = "AllowWindowsInkWorkspace"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck260([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.260"
        "CIS Name"      = "ALWAYS INSTALL WITH ELEVATED PRIVILEGES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Installer"
        "ValueName"     = "AlwaysInstallElevated"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck261([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.261"
        "CIS Name"      = "ENABLE MPR NOTIFICATIONS FOR THE SYSTEM"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "EnableMprNotifications" # Example, actual reg key might vary
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck263([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.263"
        "CIS Name"      = "ALLOW BASIC AUTHENTICATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WinRM\Client"
        "ValueName"     = "AllowBasic"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck264([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.264"
        "CIS Name"      = "ALLOW UNENCRYPTED TRAFFIC"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WinRM\Client"
        "ValueName"     = "AllowUnencryptedTraffic"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck266([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.266"
        "CIS Name"      = "ALLOW BASIC AUTHENTICATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WinRM\Service"
        "ValueName"     = "AllowBasic"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck267([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.267"
        "CIS Name"      = "ALLOW UNENCRYPTED TRAFFIC"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WinRM\Service"
        "ValueName"     = "AllowUnencryptedTraffic"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck269([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.269"
        "CIS Name"      = "PREVENT USERS FROM MODIFYING SETTINGS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\SettingSync"
        "ValueName"     = "DisableSync" # Effectively prevents modification
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck270([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.270"
        "CIS Name"      = "CONFIGURE AUTOMATIC UPDATES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
        "ValueName"     = "AUOptions"
        "ExpectedValue" = "2" # Notify for download and auto install
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck271([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.271"
        "CIS Name"      = "CONFIGURE AUTOMATIC UPDATES: SCHEDULED INSTALL DAY"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
        "ValueName"     = "ScheduledInstallDay"
        "ExpectedValue" = "0" # Every Day
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck272([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.272"
        "CIS Name"      = "MANAGE PREVIEW BUILDS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PreviewBuilds"
        "ValueName"     = "AllowBuildPreview" # Same as 230
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck273([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.273"
        "CIS Name"      = "TURN OFF TOAST NOTIFICATIONS ON THE LOCK SCREEN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "DisableNotificationScreen"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck274([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.274"
        "CIS Name"      = "DO NOT PRESERVE ZONE INFORMATION IN FILE ATTACHMENTS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Attachments"
        "ValueName"     = "SaveZoneInformation"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck275([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.275"
        "CIS Name"      = "CONFIGURE WINDOWS SPOTLIGHT ON LOCK SCREEN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "TurnOffSpotlightOnLockScreen"
        "ExpectedValue" = "1" # Enabled (to turn off spotlight)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck279([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.279"
        "CIS Name"      = "ALWAYS INSTALL WITH ELEVATED PRIVILEGES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Installer"
        "ValueName"     = "AlwaysInstallElevated"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck280([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.280"
        "CIS Name"      = "RESET ACCOUNT LOCKOUT COUNTER AFTER"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\Netlogon\Parameters"
        "ValueName"     = "ResetLockoutCount"
        "ExpectedValue" = "30" # 30 minutes, adjust as needed
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck283([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.283"
        "CIS Name"      = "PASSWORD NEVER EXPIRES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System"
        "ValueName"     = "PasswordExpiryWarningDays" # Example, actual reg key varies for password policy
        "ExpectedValue" = "0" # Should not be set to 0 for "never expires"
        "MustExist"     = $true
        "Comparator"    = ">" # Should be greater than 0
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck284([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.284"
        "CIS Name"      = "PRV_SEC_FA_SRV_VATWS, PRV_EAM_AA_SRV_IDM_SERVER_ADMINS"
        "CheckType"     = "Secedit"
        "SeceditKey"    = "SeSecurityPrivilege" # This privilege is for managing security log and auditing.
        "ExpectedValue" = "LOCAL SERVICE,NETWORK SERVICE,ADMINISTRATORS" # Example, customize as needed
    }
    $ComplianceValues = Test-Secedit -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck292([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.292"
        "CIS Name"      = "PRIVATE PROFILE: WINDOWS FIREWALL"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PrivateProfile"
        "ValueName"     = "EnableFirewall"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck293([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.293"
        "CIS Name"      = "THE PRIVATE PROFILE SETTINGS APPLY LOCAL CONNECTION SECURITY RULES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\PrivateProfile"
        "ValueName"     = "DisableUnicastResponsesToMulticastBroadcast" # Example, could be a general security rule
        "ExpectedValue" = "0" # Disabled (to allow local rules to apply)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck298([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.298"
        "CIS Name"      = "DISABLE WINS ENTRIES FOR IP ADDRESSES"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\NetBT\Parameters"
        "ValueName"     = "EnableDhcp" # If DHCP is enabled, WINS might be too. Check for a specific WINS setting.
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck300([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.300"
        "CIS Name"      = "SYSTEMS SETTINGS: OPTIONAL SUBSYSTEMS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\SubSystems"
        "ValueName"     = "Optional" # Example for optional subsystems
        "ExpectedValue" = "" # Should be empty or controlled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck307([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.307"
        "CIS Name"      = "RECOVERY CONSOLE: ALLOW AUTOMATIC ADMINISTRATIVE LOGON"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Setup\RecoveryConsole"
        "ValueName"     = "SetCommand" # Example, actual reg key might vary
        "ExpectedValue" = "0" # Disabled (to prevent auto logon)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck310([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.310"
        "CIS Name"      = "BYPASS TRAVERSE CHECKING"
        "CheckType"     = "Secedit"
        "SeceditKey"    = "SeChangeNotifyPrivilege" # This is the "Bypass traverse checking" privilege
        "ExpectedValue" = "Everyone,Users,Administrators,LOCAL SERVICE,NETWORK SERVICE,AUTHENTICATED USERS" # Common default, customize as needed
    }
    $ComplianceValues = Test-Secedit -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck317([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.317"
        "CIS Name"      = "WINDOWS FIREWALL"
        "CheckType"     = "Service"
        "ServiceName"   = "MpsSvc" # Windows Firewall service
        "ExpectedValue" = "Running,Automatic"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck326([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.326"
        "CIS Name"      = "DHCP SERVER SERVICES"
        "CheckType"     = "Service"
        "ServiceName"   = "DHCPServer" # DHCP Server service name
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck331([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.331"
        "CIS Name"      = "REMOTE ACCESS AUTO CONNECTION MANAGER"
        "CheckType"     = "Service"
        "ServiceName"   = "RasAuto"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck332([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.332"
        "CIS Name"      = "REMOTE ACCESS CONNECTION MANAGER MUST BE SET TO"
        "CheckType"     = "Service"
        "ServiceName"   = "RasMan"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck336([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.336"
        "CIS Name"      = "TELEPHONY SERVICE"
        "CheckType"     = "Service"
        "ServiceName"   = "TapiSrv" # Actual service name
        "ExpectedValue" = "Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck337([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.337"
        "CIS Name"      = "TELNET SERVER"
        "CheckType"     = "Service"
        "ServiceName"   = "TlntSvr" # Actual service name
        "ExpectedValue" = "Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck338([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.338"
        "CIS Name"      = "WINDOWS EVENT LOG MUST BE SET TO AUTOMATIC."
        "CheckType"     = "Service"
        "ServiceName"   = "EventLog"
        "ExpectedValue" = "Running,Automatic"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck344([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.344"
        "CIS Name"      = "WALLET SERVICE"
        "CheckType"     = "Service"
        "ServiceName"   = "WalletService"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck351([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.351"
        "CIS Name"      = "CONNECTED USER EXPERIENCES AND TELEMETRY” (DIAGTRACK)"
        "CheckType"     = "Service"
        "ServiceName"   = "DiagTrack"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck352([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.352"
        "CIS Name"      = "SMTPSVC"
        "CheckType"     = "Service"
        "ServiceName"   = "SMTPSVC"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck363([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.363"
        "CIS Name"      = "USB DRIVE ACCESS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SYSTEM\CurrentControlSet\Services\USBSTOR"
        "ValueName"     = "Start"
        "ExpectedValue" = "4" # 4 for Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck365([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.365"
        "CIS Name"      = "BLOCK LAUNCHING WINDOWS STORE APPS WITH WINDOWS RUNTIME API ACCESS FROM HOSTED CONTENT"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Appx"
        "ValueName"     = "NoWindowsRuntimeAccess"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck366([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.366"
        "CIS Name"      = "ALLOW TELEMETRY"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"
        "ValueName"     = "AllowTelemetry"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck367([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.367"
        "CIS Name"      = "CONFIGURE WINDOWS DEFENDER SMARTSCREEN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\SmartScreen"
        "ValueName"     = "Enabled"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck369([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.369"
        "CIS Name"      = "DO NOT ALLOW COM PORT REDIRECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client"
        "ValueName"     = "fDisableCpm"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck370([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.370"
        "CIS Name"      = "DO NOT ALLOW SUPPORTED PLUG AND PLAY DEVICE REDIRECTION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client"
        "ValueName"     = "fDisablePNP"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck375([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.375"
        "CIS Name"      = "ALLOW CORTANA"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCortana"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck376([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.376"
        "CIS Name"      = "ALLOW CORTANA ABOVE LOCK SCREEN"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"
        "ValueName"     = "AllowCortanaAtLockScreen"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck377([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.377"
        "CIS Name"      = "ALLOW SEARCH AND CORTANA TO USE LOCATION"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors"
        "ValueName"     = "DisableLocation"
        "ExpectedValue" = "1" # Enabled (to disable location)
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck380([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.380"
        "CIS Name"      = "DISABLE ALL APPS FROM WINDOWS STORE"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore"
        "ValueName"     = "DisableStore"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck381([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.381"
        "CIS Name"      = "TURN OFF MICROSOFT DEFENDER ANTIVIRUS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"
        "ValueName"     = "DisableAntiSpyware"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck383([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.383"
        "CIS Name"      = "JOIN MICROSOFT MAPS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"
        "ValueName"     = "SpyNetReporting"
        "ExpectedValue" = "0" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck384([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.384"
        "CIS Name"      = "SEND FILE SAMPLES WHEN FURTHER ANALYSIS IS REQUIRED"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet"
        "ValueName"     = "SubmitSamplesConsent"
        "ExpectedValue" = "2" # Never Send
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck386([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.386"
        "CIS Name"      = "CONFIGURE WATSON EVENTS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting"
        "ValueName"     = "Disabled"
        "ExpectedValue" = "1" # Disabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck387([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.387"
        "CIS Name"      = "MAXIMUM LOG SIZE FOR POWERSHELL LOGS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "MaxSize"
        "ExpectedValue" = "33554432" # 32MB example
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck388([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.388"
        "CIS Name"      = "LOCK DOWN THE SECURITY DESCRIPTOR ON THE POWERSHELL LOGS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "CustomSD"
        "ExpectedValue" = "O:BAG:SYD:(A;;0x2;;;S-1-5-32-573)(A;;0x3;;;S-1-5-18)(A;;0x3;;;S-1-5-19)(A;;0x3;;;S-1-5-20)(A;;0x3;;;S-1-5-32-544)(A;;0x3;;;S-1-5-32-545)"
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck389([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.389"
        "CIS Name"      = "MAXIMUM OPERATIONAL LOG SIZE FOR POWERSHELL LOGS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "MaxSize"
        "ExpectedValue" = "33554432" # 32MB example
        "MustExist"     = $true
        "Comparator"    = ">="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck390([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.390"
        "CIS Name"      = "LOCK DOWN THE SECURITY DESCRIPTOR ON THE POWERSHELL OPERATIONAL LOGS"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Microsoft-Windows-PowerShell/Operational"
        "ValueName"     = "CustomSD"
        "ExpectedValue" = "O:BAG:SYD:(A;;0x2;;;S-1-5-32-573)(A;;0x3;;;S-1-5-18)(A;;0x3;;;S-1-5-19)(A;;0x3;;;S-1-5-20)(A;;0x3;;;S-1-5-32-544)(A;;0x3;;;S-1-5-32-545)"
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck394([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.394"
        "CIS Name"      = "TURN ON MODULE LOGGING MUST BE SET TO 'ENABLED'"
        "CheckType"     = "Registry"
        "Path"          = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging"
        "ValueName"     = "EnableModuleLogging"
        "ExpectedValue" = "1" # Enabled
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck396([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.396"
        "CIS Name"      = "BROWSER PROXY LOCKDOWN"
        "CheckType"     = "Registry"
        "Path"          = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings"
        "ValueName"     = "ProxySettingsPerUser"
        "ExpectedValue" = "0" # 0 indicates system-wide or non-user configurable
        "MustExist"     = $true
        "Comparator"    = "="
    }
    $ComplianceValues = Test-Registry -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck440([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.440"
        "CIS Name"      = "LOGON AS A SERVICE"
        "CheckType"     = "Secedit"
        "SeceditKey"    = "SeServiceLogonRight"
        "ExpectedValue" = "" # This right is typically assigned to specific accounts, empty means no specific non-default SIDs.
    }
    $ComplianceValues = Test-Secedit -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck441([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.441"
        "CIS Name"      = "DISABLE MACHINE CONFIGURATION"
        "CheckType"     = "Service"
        "ServiceName"   = "GuestProxyAgent" # This is a common service for machine configuration in Azure environments.
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}

Function BaseLineCheck442([string]$CheckName) {
    $Requirements = @{
        "ISBL"          = "ISBL-10564-01.442"
        "CIS Name"      = "DISABLE EXTENSIONSERVICE"
        "CheckType"     = "Service"
        "ServiceName"   = "ExtensionService" # Assuming a service named "ExtensionService"
        "ExpectedValue" = "Stopped,Disabled"
    }
    $ComplianceValues = Test-Service -Requirement $Requirements
    if(-not $ComplianceValues){
        $ReturnResult = 'Error Returning Value'
        $ReturnCode = 1
        $ErrorMessage = "Error Returning Value for $($Requirements.ISBL)"
        return @{sExpectedValue = $Expected; sReturnValue = $ReturnResult; bIsCompliant = $ReturnCode; sErrorMessage = $ErrorMessage}
    }
    return $ComplianceValues
}
